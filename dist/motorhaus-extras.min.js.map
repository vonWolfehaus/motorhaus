{"version":3,"sources":["Camera2.js","Emitter.js","FlowGrid.js","Point.js","Rectangle.js","Scene.js","TileMap2.js","Vec2.js","VectorFieldState.js","steering.js","components/GridTargeter.js","components/Health.js","components/Timer.js","entities/BoidGroup.js","components/ai/Boid.js","components/ai/StackFSM.js","components/graphics/PIXISprite.js","components/graphics/THREECube.js","components/input/GamepadController.js","components/input/KeyboardController.js","components/input/MouseController.js","components/input/TwinStickMovement.js","components/input/XboxGamepad.js","components/physics/CollisionGridScanner.js"],"names":["mh","Camera2","settings","Base","call","this","width","kai","height","scalable","scale","minScale","maxScale","scalePadding","target","targets","displayObject","deadzone","bounds","Rectangle","world","util","overwrite","position","Vec2","atLimit","x","y","_edge","FOLLOW_LOCKON","FOLLOW_PLATFORMER","FOLLOW_TOPDOWN_LOOSE","FOLLOW_TOPDOWN","FOLLOW_TOPDOWN_TIGHT","prototype","follow","style","Object","toString","console","log","helper","w","h","Math","max","focusOn","setPosition","round","focusOnXY","update","updateTarget","checkBounds","i","minX","minY","maxX","maxY","rx","ry","pos","t","len","lastActive","activeLen","length","Number","MAX_VALUE","MIN_VALUE","active","setBoundsToWorld","setTo","right","top","bottom","floor","setSize","Emitter","entity","container","stage","blend","emitType","EmitType","Point","emitDuration","emitAngle","emitAngleVar","TAU","emitSpeed","emitSpeedVar","emitRate","particleDuration","particleDurationVar","particleScaleInit","particleScaleVar","particleAlphaInit","particleAlphaAccel","particleAlphaAccelDelay","particleRotationAccel","particleRotationAccelVar","particleRadialAccel","particleRadialAccelVar","particleTangentialAccel","particleTangentialAccelVar","particleGravity","duration","uri","Error","texture","PIXI","Texture","fromImage","uuid","generateID","_force","_vec","_emitTimer","_pool","DualPool","Particle","_emissionSum","create","SpriteBatch","constructor","accessor","className","priority","activate","addChild","visible","elapsed","disable","removeChild","freeAll","p","o","l","busy","emit","first","obj","next","alpha","recycle","fadeDelay","set","vx","vy","copy","multiplyScalar","radialAccel","normalize","perp","tangentialAccel","rotation","rotationAccel","dispose","removeChildren","destroy","forces","amt","a","ii","Type","get","random","blendMode","blendModes","ADD","NORMAL","cos","sin","Rect","randomInt","_width","_height","Circle","CircleUniform","sqrt","Ring","parent","Sprite","addChildAt","anchor","FlowGrid","cellSize","cellPixelSize","widthInCells","heightInCells","numCells","grid","goal","goalPixels","_openList","LinkedList","_sizeMulti","j","FlowGridNode","flow","setGoal","endPixelX","endPixelY","endX","endY","build","current","node","neighbor","v","b","open","clear","cost","add","shift","gridX","gridY","passable","draw","ctx","lineWidth","strokeStyle","fillStyle","beginPath","arc","fill","moveTo","lineTo","stroke","getVectorAt","setBlockAt","str","substring","gx","gy","Date","now","z","clone","source","inflate","dx","dy","empty","Scene","sceneConfig","controlConfig","sceneSettings","element","document","body","antialias","clearColor","sortObjects","fog","light","THREE","DirectionalLight","lightPosition","cameraType","cameraPosition","orthoZoom","controlSettings","minDistance","maxDistance","zoomSpeed","noZoom","merge","renderer","WebGLRenderer","setClearColor","window","innerWidth","innerHeight","AmbientLight","camera","OrthographicCamera","PerspectiveCamera","contolled","controls","OrbitControls","domElement","addEventListener","type","left","aspect","updateProjectionMatrix","bind","attachTo","setPixelRatio","devicePixelRatio","appendChild","mesh","remove","render","updateOrthoZoom","lookAt","TileMap2","tileSize","tilesprite","widthInTiles","heightInTiles","numTiles","_blockCache","_blockLookup","_ctx","constuctor","setTile","forceValue","idx","tile","block","px","py","clearRect","drawImage","pop","Block","collider","setMass","enable","getTile","id","split","parseInt","v1","v2","drawingColor","camOffsetX","camOffsetY","setLength","value","oldLength","getLength","getLengthSq","setAngle","getAngle","atan2","rotateBy","theta","addScalar","s","subtract","subtractScalar","multiply","divide","divideScalar","nx","negate","clamp","min","dotProduct","crossProd","truncate","angleTo","distanceTo","distanceToSquared","lerp","equals","startX","startY","VectorFieldState","fieldID","reachedGoal","addComponent","Component","FLOCK","Flock","_position","_vecField","_pollTime","_timer","ceil","flock","nearby","vecFieldState","steering","_sumForce","_desiredVec","_scratchVec","_wanderVec","_seperationForce","_cohereForce","_alignForce","_wanderAngle","seek","agent","dest","slowingRadius","distance","velocity","maxForce","steeringForce","flee","align","neighboursCount","boid","groupID","maxCohesion","_arrived","cohere","separate","minSeparation","r","wander","targetDistance","reset","targetRadius","angleJitter","followPath","path","repeat","_currentPathNode","pathArriveRadius","_pathDir","pursue","targetAgent","evade","pursuingAgent","GridTargeter","searchInterval","scanRadius","collisionId","_nearby","_grid","broadphase","_findTarget","performance","getNearby","Health","overage","alive","onDeath","Signal","onDamage","onHeal","onFull","onActivate","_meter","dispatch","change","amount","drain","deathSignal","Timer","immediateDispatch","interval","onInterval","_numTicks","_currentRepeat","BoidGroup","members","_nodePool","STACK_FSM","onComplete","stackFSM","stateChanged","_stateChanged","DETACHED","ATTACHED","addBoid","addEntity","warn","addEntities","list","removeBoid","removeEntity","removeAll","addWaypoint","push","pushState","setPath","newPath","removeComponent","Steering","popState","oldState","newState","groupControl","Boid","flockRadius","maxSpeed","expect","post","invmass","StackFSM","state","stack","_activeContext","_activeFunction","_prevFunction","name","PIXISprite","textureUrl","view","_display","THREECube","size","dynamic","color","cubeGeo","CubeGeometry","cubeMaterial","MeshLambertMaterial","ambient","shading","FlatShading","map","ImageUtils","loadTexture","Mesh","matrixAutoUpdate","updateMatrix","GamepadController","controllers","onConnect","onDisconnect","activeControllers","_controllerStatus","XboxGamepad","_onConnect","_onDisconnect","ctrl","navigator","webkitGetGamepads","_scan","_addPad","gamepad","index","register","_removePad","unregister","evt","gamepads","setPad","KeyboardController","key","onDown","onUp","_keys","_prev","_processDown","_processUp","keyCode","inputBlocked","preventDefault","shiftKey","ctrlKey","isDown","timeDown","timeUp","justPressed","keycode","justReleased","A","charCodeAt","B","C","D","E","F","G","H","I","J","K","L","M","N","O","P","Q","R","S","T","U","V","W","X","Y","Z","ZERO","ONE","TWO","FOUR","FIVE","SIX","SEVEN","EIGHT","NINE","NUMPAD_0","NUMPAD_1","NUMPAD_2","NUMPAD_3","NUMPAD_4","NUMPAD_5","NUMPAD_6","NUMPAD_7","NUMPAD_8","NUMPAD_9","NUMPAD_MULTIPLY","NUMPAD_ADD","NUMPAD_ENTER","NUMPAD_SUBTRACT","NUMPAD_DECIMAL","NUMPAD_DIVIDE","F1","F2","F3","F4","F5","F6","F7","F8","F9","F10","F11","F12","F13","F14","F15","COLON","EQUALS","UNDERSCORE","QUESTION_MARK","TILDE","OPEN_BRACKET","BACKWARD_SLASH","CLOSED_BRACKET","QUOTES","BACKSPACE","TAB","CLEAR","ENTER","SHIFT","CONTROL","ALT","CAPS_LOCK","ESC","SPACEBAR","PAGE_UP","PAGE_DOWN","END","HOME","LEFT","UP","RIGHT","DOWN","INSERT","DELETE","HELP","NUM_LOCK","MouseController","down","onMouseDown","onMouseUp","onMouseMove","onMouseContext","pageX","pageY","TwinStickMovement","speed","pad","accel","leftAxis","rightAxis","leftTrigger","rightTrigger","axisTolerance","controller","buttons","_numButtons","_mozAxisOffset","_prevButtons","ctrlr","btn","leftX","axes","leftY","rightX","rightY","XBOX","LB","RB","LT","RT","SELECT","START","LSTICK","RSTICK","CollisionGridScanner","onCollision","_body","getNeighbors","physics","testCircleVsCircle"],"mappings":"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","file":"motorhaus-extras.min.js","sourcesContent":["/**\n * A Camera is your view into the game world. It has a position and size and renders only those objects within its field of view.\n * The game automatically creates a single Stage sized camera on boot. Move the camera around the world with Camera.\n * @author Richard Davey (Phaser)\n * @author Corey Birnbaum http://coldconstructs.com/ @vonWolfehaus\n */\n mh.Camera2 = function(settings) {\n\tsettings = settings || {};\n\tmh.Base.call(this);\n\n\t// attributes\n\tthis.width = mh.kai.width;\n\tthis.height = mh.kai.height;\n\tthis.scalable = false; // scale if there are multiple targets and they get outside of view\n\tthis.scale = 1;\n\tthis.minScale = 0.3; // how far it can zoom out\n\tthis.maxScale = 1; // how far to zoom in\n\tthis.scalePadding = 100;\n\tthis.target = null;\n\tthis.targets = null;\n\t// {x, y, scaleX, scaleY} reference to the object that gets moved around by the camera to give the impression of a world larger than the screen.\n\tthis.displayObject = null;\n\t// {Rectangle} Moving inside this Rectangle will not cause camera moving.\n\tthis.deadzone = null;\n\n\t/**\n\t * The Camera is bound to this Rectangle and cannot move outside of it. By default it is enabled and set to the size of the World.\n\t * The Rectangle can be located anywhere in the world and updated as often as you like. If you don't wish the Camera to be bound\n\t * at all then set this to null. The values can be anything and are in World coordinates, with 0,0 being the center of the world.\n\t * @property {Rectangle} bounds - The Rectangle in which the Camera is bounded. Set to null to allow for movement anywhere.\n\t */\n\tthis.bounds = new mh.Rectangle(0, 0, mh.world.width, mh.world.height);\n\n\tmh.util.overwrite(this, settings);\n\n\t// base components\n\tthis.position = new mh.Vec2();\n\t// this.velocity = new mh.Vec2();\n\n\t/**\n\t * @property {boolean} atLimit - Whether this camera is flush with the World Bounds or not.\n\t */\n\tthis.atLimit = { x: false, y: false };\n\n\tthis._edge = 0;\n\n\t// console.log(this.scalable);\n};\n\nmh.Camera2.FOLLOW_LOCKON = 0;\nmh.Camera2.FOLLOW_PLATFORMER = 1;\nmh.Camera2.FOLLOW_TOPDOWN_LOOSE = 2;\nmh.Camera2.FOLLOW_TOPDOWN = 3;\nmh.Camera2.FOLLOW_TOPDOWN_TIGHT = 4;\n\nmh.Camera2.prototype = {\n\n\t/**\n\t * Tells this camera which sprite to follow.\n\t * @method Camera#follow\n\t * @param {Sprite} target - Vec2 or array of entities with positions to track. Set to null to not follow anything.\n\t * @param {number} [style] Leverage one of the existing 'deadzone' presets. If you use a custom deadzone, ignore this parameter and manually specify the deadzone after calling follow().\n\t */\n\tfollow: function(target, style) {\n\t\tif (typeof style === 'undefined') {\n\t\t\tstyle = mh.Camera2.FOLLOW_TOPDOWN;\n\t\t}\n\n\t\tif (Object.prototype.toString.call(target) === '[object Array]') {\n\t\t\tconsole.log('[Camera2.follow] Tracking multiple targets');\n\t\t\tthis.target = new mh.Vec2();\n\t\t\tthis.targets = target;\n\t\t}\n\t\telse {\n\t\t\tthis.target = target;\n\t\t}\n\n\t\tvar helper;\n\n\t\tswitch (style) {\n\t\t\tcase mh.Camera2.FOLLOW_PLATFORMER:\n\t\t\t\tvar w = this.width / 8;\n\t\t\t\tvar h = this.height / 3;\n\t\t\t\tthis.deadzone = new mh.Rectangle((this.width - w) / 2, (this.height - h) / 2 - h * 0.25, w, h);\n\t\t\t\tbreak;\n\n\t\t\tcase mh.Camera2.FOLLOW_TOPDOWN_LOOSE:\n\t\t\t\thelper = Math.max(this.width, this.height) / 2;\n\t\t\t\tthis.deadzone = new mh.Rectangle((this.width - helper) / 2, (this.height - helper) / 2, helper, helper);\n\t\t\t\tbreak;\n\n\t\t\tcase mh.Camera2.FOLLOW_TOPDOWN:\n\t\t\t\thelper = Math.max(this.width, this.height) / 4;\n\t\t\t\tthis.deadzone = new mh.Rectangle((this.width - helper) / 2, (this.height - helper) / 2, helper, helper);\n\t\t\t\tbreak;\n\n\t\t\tcase mh.Camera2.FOLLOW_TOPDOWN_TIGHT:\n\t\t\t\thelper = Math.max(this.width, this.height) / 8;\n\t\t\t\tthis.deadzone = new mh.Rectangle((this.width - helper) / 2, (this.height - helper) / 2, helper, helper);\n\t\t\t\tbreak;\n\n\t\t\tcase mh.Camera2.FOLLOW_LOCKON:\n\t\t\t\tthis.deadzone = null;\n\t\t\t\tbreak;\n\n\t\t\tdefault:\n\t\t\t\tthis.deadzone = null;\n\t\t\t\tbreak;\n\t\t}\n\n\t},\n\n\t/**\n\t* Move the camera focus on a display object instantly.\n\t* @method Camera2#focusOn\n\t* @param {any} displayObject - The display object to focus the camera on. Must have visible x/y properties.\n\t*/\n\tfocusOn: function(displayObject) {\n\t\tthis.setPosition(Math.round(displayObject.x - (this.width*0.5)), Math.round(displayObject.y - (this.height*0.5)));\n\t},\n\n\t/**\n\t* Move the camera focus on a location instantly.\n\t* @method Camera2#focusOnXY\n\t* @param {number} x - X position.\n\t* @param {number} y - Y position.\n\t*/\n\tfocusOnXY: function(x, y) {\n\t\tthis.setPosition(Math.round(x - (this.width*0.5)), Math.round(y - (this.height*0.5)));\n\t},\n\n\t/**\n\t* Update focusing and scrolling.\n\t* @method Camera2#update\n\t*/\n\tupdate: function() {\n\t\tif (this.target) {\n\t\t\tthis.updateTarget();\n\t\t}\n\n\t\tif (this.bounds) {\n\t\t\tthis.checkBounds();\n\t\t}\n\n\t\tif (this.scalable) {\n\t\t\tthis.displayObject.scale.x = this.scale;\n\t\t\tthis.displayObject.scale.y = this.scale;\n\t\t}\n\n\t\t// this.displayObject.position.x = -this.position.x;\n\t\t// this.displayObject.position.y = -this.position.y;\n\t\tthis.displayObject.x = -this.position.x;\n\t\tthis.displayObject.y = -this.position.y;\n\t},\n\n\tupdateTarget: function() {\n\t\tvar i, minX, minY, maxX, maxY, w, h, rx, ry, pos,\n\t\t\tt, len, lastActive, activeLen;\n\n\t\t// loop through all the targets to find bounding area\n\t\tif (this.targets) {\n\t\t\tlen = this.targets.length;\n\t\t\tactiveLen = 0;\n\n\t\t\tminX = Number.MAX_VALUE, minY = Number.MAX_VALUE;\n\t\t\tmaxX = Number.MIN_VALUE, maxY = Number.MIN_VALUE;\n\t\t\tfor (i = 0; i < len; i++) {\n\t\t\t\tt = this.targets[i];\n\t\t\t\tif (t.active) {\n\t\t\t\t\tactiveLen++;\n\t\t\t\t\tlastActive = t;\n\t\t\t\t\tpos = t.position;\n\t\t\t\t\tif (pos.x < minX) minX = pos.x;\n\t\t\t\t\tif (pos.y < minY) minY = pos.y;\n\t\t\t\t\tif (pos.x > maxX) maxX = pos.x;\n\t\t\t\t\tif (pos.y > maxY) maxY = pos.y;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (activeLen > 1) {\n\t\t\t\tthis.target.x = (minX + maxX) * 0.5;\n\t\t\t\tthis.target.y = (minY + maxY) * 0.5;\n\n\t\t\t\tif (this.scalable) {\n\t\t\t\t\tthis.scale = 1;\n\n\t\t\t\t\tw = maxX - minX + this.scalePadding;\n\t\t\t\t\th = maxY - minY + this.scalePadding;\n\n\t\t\t\t\trx = w === 0 ? 1 : mh.kai.width / w;\n\t\t\t\t\try = h === 0 ? 1 : mh.kai.height / h;\n\t\t\t\t\tif (rx < ry) {\n\t\t\t\t\t\tthis.scale = rx;\n\t\t\t\t\t}\n\t\t\t\t\telse {\n\t\t\t\t\t\tthis.scale = ry;\n\t\t\t\t\t}\n\n\t\t\t\t\tif (this.scale < this.minScale) {\n\t\t\t\t\t\tthis.scale = this.minScale;\n\t\t\t\t\t}\n\t\t\t\t\telse if (this.scale > this.maxScale) {\n\t\t\t\t\t\tthis.scale = this.maxScale;\n\t\t\t\t\t}\n\n\t\t\t\t\tthis.target.x *= this.scale;\n\t\t\t\t\tthis.target.y *= this.scale;\n\n\t\t\t\t\t// DebugDraw.circle(this.target.x - this.position.x, this.target.y - this.position.y, 2);\n\t\t\t\t}\n\n\t\t\t}\n\t\t\telse if (activeLen === 1) {\n\t\t\t\tthis.target.x = lastActive.position.x;\n\t\t\t\tthis.target.y = lastActive.position.y;\n\t\t\t\tthis.scale = 1;\n\t\t\t}\n\t\t}\n\n\t\tif (this.deadzone) {\n\t\t\tthis._edge = this.target.x - this.deadzone.x;\n\t\t\tif (this.position.x > this._edge) {\n\t\t\t\tthis.position.x = this._edge;\n\t\t\t}\n\n\t\t\tthis._edge = this.target.x - this.deadzone.x - this.deadzone.width;\n\t\t\tif (this.position.x < this._edge) {\n\t\t\t\tthis.position.x = this._edge;\n\t\t\t}\n\n\t\t\tthis._edge = this.target.y - this.deadzone.y;\n\t\t\tif (this.position.y > this._edge) {\n\t\t\t\tthis.position.y = this._edge;\n\t\t\t}\n\n\t\t\tthis._edge = this.target.y - this.deadzone.y - this.deadzone.height;\n\t\t\tif (this.position.y < this._edge) {\n\t\t\t\tthis.position.y = this._edge;\n\t\t\t}\n\n\t\t}\n\t\telse {\n\t\t\tthis.focusOnXY(this.target.x, this.target.y);\n\t\t}\n\t},\n\n\tsetBoundsToWorld: function() {\n\t\tthis.bounds.setTo(0, 0, mh.world.width, mh.world.height);\n\t},\n\n\t/**\n\t* Method called to ensure the camera doesn't venture outside of the game world.\n\t* @method Camera2#checkWorldBounds\n\t*/\n\tcheckBounds: function() {\n\t\tthis.atLimit.x = false;\n\t\tthis.atLimit.y = false;\n\n\t\t//  Make sure we didn't go outside the cameras bounds\n\t\tif (this.position.x < this.bounds.x) {\n\t\t\tthis.atLimit.x = true;\n\t\t\tthis.position.x = this.bounds.x;\n\t\t}\n\n\t\tif (this.position.x > this.bounds.right - this.width) {\n\t\t\tthis.atLimit.x = true;\n\t\t\tthis.position.x = (this.bounds.right - this.width) + 1;\n\t\t}\n\n\t\tif (this.position.y < this.bounds.top) {\n\t\t\tthis.atLimit.y = true;\n\t\t\tthis.position.y = this.bounds.top;\n\t\t}\n\n\t\tif (this.position.y > this.bounds.bottom - this.height) {\n\t\t\tthis.atLimit.y = true;\n\t\t\tthis.position.y = (this.bounds.bottom - this.height) + 1;\n\t\t}\n\n\t\tthis.position.x = Math.floor(this.position.x);\n\t\tthis.position.y = Math.floor(this.position.y);\n\t},\n\n\t/**\n\t* A helper function to set both the X and Y properties of the camera at once\n\t* without having to use game.camera.x and game.camera.y.\n\t*\n\t* @method Camera2#setPosition\n\t* @param {number} x - X position.\n\t* @param {number} y - Y position.\n\t*/\n\tsetPosition: function(x, y) {\n\t\tthis.position.x = x;\n\t\tthis.position.y = y;\n\n\t\tif (this.bounds) {\n\t\t\tthis.checkBounds();\n\t\t}\n\t},\n\n\t/**\n\t* Sets the size of the view rectangle given the width and height in parameters.\n\t*\n\t* @method Camera2#setSize\n\t* @param {number} width - The desired width.\n\t* @param {number} height - The desired height.\n\t*/\n\tsetSize: function(width, height) {\n\t\tthis.width = width;\n\t\tthis.height = height;\n\t}\n};\n","/*\n\tA basic particle emitter: point and area emission, and a few dynamic force types.\n\tDoes not require an entity.\n\tBased on https://github.com/city41/particle.js\n\t@author Corey Birnbaum http://coldconstructs.com/ @vonWolfehaus\n*/\nmh.Emitter = function(entity, settings) {\n\tsettings = settings || {};\n\tmh.Base.call(this);\n\n\t// adjustable properties available to override in settings\n\tthis.width = 10; // setting a nice default\n\tthis.height = 10;\n\tthis.container = mh.mh.kai.stage; // puts particles on top of everything\n\tthis.blend = false;\n\n\tthis.emitType = mh.Emitter.EmitType.Point;\n\tthis.emitDuration = -1; // how long to emit for, in seconds, or -1 for forever\n\tthis.emitAngle = 0; // angle at which particles are emitted only in radians\n\tthis.emitAngleVar = mh.util.TAU; // \"spread\" of emission based around emitAngle in radians; default is full circle\n\tthis.emitSpeed = 10;\n\tthis.emitSpeedVar = 0;\n\tthis.emitRate = 30; // how many per second\n\n\tthis.particleDuration = 1; // in seconds\n\tthis.particleDurationVar = 0;\n\tthis.particleScaleInit = 1; // 0 - 1\n\tthis.particleScaleVar = 0; // 0 - 1\n\t// this.particleScaleAccel = 1;\n\n\tthis.particleAlphaInit = 1; // 0 - 1\n\tthis.particleAlphaAccel = -2; // how fast to fade in (positive) or out (negative)\n\tthis.particleAlphaAccelDelay = 0.5; // seconds to wait before applying alpha accel\n\n\tthis.particleRotationAccel = 0; // particle sprite spin speed\n\tthis.particleRotationAccelVar = 0.2; // randomize starting particle sprite rotation speed\n\n\tthis.particleRadialAccel = 0;\n\tthis.particleRadialAccelVar = 0;\n\n\tthis.particleTangentialAccel = 0;\n\tthis.particleTangentialAccelVar = 0;\n\n\tthis.particleGravity = null;\n\n\tmh.util.overwrite(this, settings);\n\n\tthis.particleGravity = this.particleGravity || {x: 0, y: 0};\n\n\t// public\n\tthis.entity = entity || null; // avoiding undefined\n\tthis.duration = 0;\n\tthis.position = new mh.Vec2(); // get rid of Pixi's Point in favor of Vec2\n\tif (!this.uri) {\n\t\tthrow new Error('[Emitter] You must pass in an image uri through the settings parameter');\n\t}\n\tthis.texture = PIXI.Texture.fromImage(settings.uri);\n\t// this.texture.frame = new PIXI.Rectangle(this.offsetX, this.offsetY, this.width, this.height);\n\n\t// base\n\tthis.uuid = mh.util.generateID();\n\tthis.active = false;\n\n\t// private\n\tthis._force = new mh.Vec2(); // aggregate force applied to each particle on update(), resets on each iteration, do not use\n\tthis._vec = new mh.Vec2(); // scratch Vec2 for update(), do not use\n\tthis._emitTimer = 0;\n\tthis._pool = new mh.DualPool(mh.Particle, this, 15);\n\tthis._emissionSum = 0;\n};\n\n// inherit from PIXI SpriteBatch\nmh.Emitter.prototype = Object.create(PIXI.SpriteBatch.prototype);\nmh.Emitter.prototype.constructor = mh.Emitter;\n\n// required statics for component system\nmh.Emitter.accessor = 'emitter'; // property name as it sits on an entity\nmh.Emitter.className = 'EMITTER'; // name of component on the definition list object\nmh.Emitter.priority = 50; // general position in the engine's component array; updated in ascending order\n\n\n/*-------------------------------------------------------------------------------\n\t\t\t\t\t\t\t\t\tCOMPONENT INTERFACE\n-------------------------------------------------------------------------------*/\n\nmh.Emitter.prototype.activate = function() {\n\tthis.active = true;\n\tthis.container.addChild(this);\n\tthis.visible = true;\n\tthis.duration = 0;\n\tthis._emissionSum = this.emitRate * mh.kai.elapsed;\n};\n\nmh.Emitter.prototype.disable = function() {\n\tthis.active = false;\n\tthis.container.removeChild(this);\n\tthis._pool.freeAll();\n};\n\nmh.Emitter.prototype.update = function() {\n\tvar i, p, o, l = this._pool.busy; // only loop through active particles\n\n\tthis.duration += mh.kai.elapsed;\n\tif (this.emitDuration === -1 || this.duration < this.emitDuration) {\n\t\t// we can still emit\n\t\tthis._emissionSum += this.emitRate * mh.kai.elapsed;\n\t\tif (this._emissionSum >= 1) {\n\t\t\ti = Math.floor(this._emissionSum);\n\t\t\tthis.emit(i);\n\t\t\tthis._emissionSum -= i;\n\t\t}\n\t}\n\telse {\n\t\t// we are done emitting but we need to wait until all particles finish\n\t\tif (this._pool.busy.length === 0) {\n\t\t\tthis.disable();\n\t\t\treturn;\n\t\t}\n\t}\n\n\to = l.first;\n\twhile (o) {\n\t\tp = o.obj; // update our active particles\n\t\to = o.next;\n\n\t\tp.duration += mh.kai.elapsed;\n\t\tif (p.alpha < 0 || p.duration >= this.particleDuration) {\n\t\t\tp.visible = false; // no need to disable, it gets taken out of the busy list when recycled\n\t\t\tthis._pool.recycle(p);\n\t\t\tcontinue;\n\t\t}\n\n\t\tif (p.fadeDelay <= 0) {\n\t\t\tp.alpha += this.particleAlphaAccel * mh.kai.elapsed;\n\t\t}\n\t\telse {\n\t\t\tp.fadeDelay -= mh.kai.elapsed;\n\t\t}\n\n\t\tthis._vec.set(p.vx, p.vy); // normalized velocity\n\t\tthis._force.copy(this._vec); // velocity\n\n\t\tthis._force.multiplyScalar(p.radialAccel);\n\n\t\tthis._vec.normalize();\n\t\tthis._vec.perp();\n\t\tthis._vec.multiplyScalar(p.tangentialAccel);\n\t\t// sum acceleration forces and integrate\n\t\tp.vx += (this._force.x + this._vec.x + this.particleGravity.x) * mh.kai.elapsed;\n\t\tp.vy += (this._force.y + this._vec.y + this.particleGravity.y) * mh.kai.elapsed;\n\t\tp.position.x += p.vx * mh.kai.elapsed;\n\t\tp.position.y += p.vy * mh.kai.elapsed;\n\t\tp.rotation += p.rotationAccel * mh.kai.elapsed;\n\t}\n};\n\nmh.Emitter.prototype.dispose = function() {\n\tthis.removeChildren();\n\tthis.texture.destroy();\n\tthis._pool.dispose();\n\tthis._pool = null;\n\tthis.forces = null;\n};\n\n/*-------------------------------------------------------------------------------\n\t\t\t\t\t\t\t\t\tPUBLIC\n-------------------------------------------------------------------------------*/\n\nmh.Emitter.prototype.emit = function(amt) {\n\tvar Type = mh.Emitter.EmitType;\n\tvar a, i, ii, p;\n\t// positions are relative to emitter (Pixi handles child coordinates)\n\tfor (i = 0; i < amt; i++) {\n\t\tp = this._pool.get();\n\t\tp.activate();\n\t\tp.duration = mh.util.random(this.particleDurationVar);\n\t\tp.rotation = mh.util.random(this.particleRotationAccelVar * mh.util.TAU);\n\t\tii = this.particleScaleInit + mh.util.random(this.particleScaleVar);\n\t\tp.scale.set(ii, ii);\n\t\tp.alpha = this.particleAlphaInit;\n\t\tp.fadeDelay = this.particleAlphaAccelDelay;\n\t\tp.blendMode = this.blend ? PIXI.blendModes.ADD : PIXI.blendModes.NORMAL;\n\t\t// velocity\n\t\ta = this.emitAngle + mh.util.random(this.emitAngleVar);\n\t\tii = this.emitSpeed + mh.util.random(this.emitSpeedVar);\n\t\tp.vx = Math.cos(a) * ii;\n\t\tp.vy = -Math.sin(a) * ii;\n\t\t// forces\n\t\tp.radialAccel = this.particleRadialAccel + mh.util.random(this.particleRadialAccelVar);\n\t\tp.tangentialAccel = this.particleTangentialAccel + mh.util.random(this.particleTangentialAccelVar);\n\t\tp.rotationAccel = this.particleRotationAccel + mh.util.random(this.particleRotationAccelVar);\n\t\t// position\n\t\tswitch (this.emitType) {\n\t\t\tcase Type.Rect:\n\t\t\t\tp.position.x = mh.util.randomInt(this._width);\n\t\t\t\tp.position.y = mh.util.randomInt(this._height);\n\t\t\t\tbreak;\n\t\t\tcase Type.Circle:\n\t\t\t\ta = Math.random() * mh.util.TAU;\n\t\t\t\tii = Math.random();\n\t\t\t\tp.position.x = ii * this._width * Math.cos(a);\n\t\t\t\tp.position.y = ii * this._height * Math.sin(a);\n\t\t\t\tbreak;\n\t\t\tcase Type.CircleUniform:\n\t\t\t\ta = Math.random() * mh.util.TAU;\n\t\t\t\tii = Math.sqrt(Math.random());\n\t\t\t\tp.position.x = ii * this._width * Math.cos(a);\n\t\t\t\tp.position.y = ii * this._height * Math.sin(a);\n\t\t\t\tbreak;\n\t\t\tcase Type.Ring:\n\t\t\t\ta = mh.util.random(mh.util.TAU);\n\t\t\t\tp.position.x = Math.cos(a) * this._width;\n\t\t\t\tp.position.y = Math.sin(a) * this._height;\n\t\t\t\tbreak;\n\t\t\tdefault: // Point\n\t\t\t\tp.position.x = 0;\n\t\t\t\tp.position.y = 0;\n\t\t\t\tbreak;\n\t\t}\n\t}\n};\n\n/*-------------------------------------------------------------------------------\n\t\t\t\t\t\t\t\t\tSTATIC\n-------------------------------------------------------------------------------*/\n\nmh.Emitter.EmitType = {\n\tPoint: 0,\n\tRect: 2,\n\tCircle: 4,\n\tCircleUniform: 5,\n\tRing: 6\n};\n\n/*-------------------------------------------------------------------------------\n\t\t\t\t\t\t\t\t\tPARTICLE\n-------------------------------------------------------------------------------*/\n\n/*\n\tThe Emitter will instantiate these as necessary, so you only need to mess with the Emitter and it will efficiently apply it to its children.\n*/\nmh.Particle = function(parent) {\n\tPIXI.Sprite.call(this, parent.texture);\n\tthis.uuid = mh.util.generateID();\n\n\tparent.addChildAt(this, 0);\n\tthis.anchor.set(0.5, 0.5);\n\t// TODO: frame either the whole sprite or if its width is greater than its height, choose random frame\n\n\tthis.active = false;\n\tthis.visible = false;\n\tthis.duration = 0;\n\tthis.fadeDelay = 0;\n\tthis.vx = 0;\n\tthis.vy = 0;\n\tthis.radialAccel = 0;\n\tthis.tangentialAccel = 0;\n\tthis.rotationAccel = 0;\n};\n\n// inherit from PIXI Sprite\nmh.Particle.prototype = Object.create(PIXI.Sprite.prototype);\nmh.Particle.prototype.constructor = mh.Particle;\n\nmh.Particle.prototype.activate = function() {\n\t// many of these are overwritten by the emitter when spawned\n\tthis.active = true;\n\tthis.visible = true;\n\tthis.alpha = 1;\n\tthis.duration = 0;\n\tthis.rotation = 0;\n\tthis.vx = 0;\n\tthis.vy = 0;\n\tthis.radialAccel = 0;\n\tthis.tangentialAccel = 0;\n\tthis.rotationAccel = 0;\n};\n\nmh.Particle.prototype.disable = function() {\n\tthis.active = false;\n\tthis.visible = false;\n};\n","/*\n\tThis is a flow grid (or vector grid) which is a combination of a grid that's generated using the wavefront algorithm, which is then used to build a grid of vectors that literally point to a goal. This provides directions for any entity to the goal point quickly. It is best used in situations where a LOT of entities share a goal, and even better when those entities use steering behaviors, making for a very fluid, natural motion path.\n\n\tFlexibility can be added by temporarily \"disrupting\" the grid with other fields emitted by dynamics obstacles. They would change the vector grid under them (not the grid) and have it return to normal as they move away.\n\n\tOptimization is needed. There should be sectors of the grid (or just one larger grid holding multiple FlowGrid instances) that only get rebuilt when needed. This might require another pathfinder like A* in order to determine which sectors need updating, to prevent the wave from propagating outside the needed bounds.\n\n\tA good place to improve on this is potential fields: http://aigamedev.com/open/tutorials/potential-fields/\n\n\t@author Corey Birnbaum http://coldconstructs.com/ @vonWolfehaus\n\t@source http://gamedev.tutsplus.com/tutorials/implementation/goal-based-vector-field-pathfinding/\n*/\nmh.FlowGrid = function(cellSize, width, height) {\n\tthis.cellPixelSize = cellSize;\n\n\tthis.widthInCells = Math.floor(width / cellSize) + 1;\n\tthis.heightInCells = Math.floor(height / cellSize) + 1;\n\n\tthis.numCells = this.widthInCells * this.heightInCells;\n\n\tthis.grid = [];\n\n\tthis.goal = new mh.Vec2();\n\tthis.goalPixels = new mh.Vec2();\n\n\tthis._openList = new mh.LinkedList();\n\tthis._sizeMulti = 1 / this.cellPixelSize;\n\n\tvar i, j;\n\tfor (i = 0; i < this.widthInCells; i++) {\n\t\tthis.grid[i] = [];\n\t\tfor (j = 0; j < this.heightInCells; j++) {\n\t\t\tthis.grid[i][j] = new mh.FlowGridNode(i, j);\n\t\t}\n\t}\n\n\tmh.kai.flow = this;\n\n\tconsole.log('[FlowGrid] '+this.widthInCells+'x'+this.heightInCells);\n};\n\nmh.FlowGrid.prototype = {\n\t/**\n\t * Coordinates are in world space (pixels).\n\t */\n\tsetGoal: function(endPixelX, endPixelY) {\n\t\tvar endX = ~~(endPixelX * this._sizeMulti);\n\t\tvar endY = ~~(endPixelY * this._sizeMulti);\n\n\t\tif (endX < 0 || endY < 0 || endX >= this.widthInCells || endY >= this.heightInCells) {\n\t\t\tthrow new Error('[FlowGrid.build] Out of bounds');\n\t\t}\n\n\t\tif (this.goal.x === endX && this.goal.y === endY) return false;\n\n\t\tthis.goal.x = endX;\n\t\tthis.goal.y = endY;\n\t\tthis.goalPixels.activate(endPixelX, endPixelY);\n\n\t\treturn true;\n\t},\n\n\t/**\n\t * Runs a breadth-first search on the heatmap, stores how many steps it took to get to each tile\n\t * along the way. Then calculates the movement vectors.\n\t */\n\tbuild: function() {\n\t\tvar i, j, current, node, neighbor,\n\t\t\tv, a, b;\n\n\t\tfor (i = 0; i < this.widthInCells; i++) {\n\t\t\tfor (j = 0; j < this.heightInCells; j++) {\n\t\t\t\tthis.grid[i][j].open = true;\n\t\t\t}\n\t\t}\n\n\t\tthis._openList.clear();\n\n\t\tnode = this.grid[this.goal.x][this.goal.y];\n\t\tnode.cost = 0;\n\n\t\tthis._openList.add(node);\n\n\t\t// front the wave. set fire to the brush. etc.\n\t\twhile (this._openList.length) {\n\t\t\tnode = this._openList.shift();\n\t\t\tnode.open = false;\n\n\t\t\tcurrent = this.grid[node.gridX][node.gridY];\n\n\t\t\t// left\n\t\t\tneighbor = node.gridX-1 >= 0 ? this.grid[node.gridX-1][node.gridY] : null;\n\t\t\tif (neighbor && neighbor.open && neighbor.passable) {\n\t\t\t\tneighbor.cost = current.cost + 1;\n\t\t\t\tneighbor.open = false; // we must set false now, in case a different neighbor gets this as neighbor\n\t\t\t\tthis._openList.add(neighbor);\n\t\t\t}\n\t\t\t// right\n\t\t\tneighbor = this.grid[node.gridX+1] ? this.grid[node.gridX+1][node.gridY] : null;\n\t\t\tif (neighbor && neighbor.open && neighbor.passable) {\n\t\t\t\tneighbor.cost = current.cost + 1;\n\t\t\t\tneighbor.open = false;\n\t\t\t\tthis._openList.add(neighbor);\n\t\t\t}\n\t\t\t// up\n\t\t\tneighbor = this.grid[node.gridX][node.gridY-1] || null;\n\t\t\tif (neighbor && neighbor.open && neighbor.passable) {\n\t\t\t\tneighbor.cost = current.cost + 1;\n\t\t\t\tneighbor.open = false;\n\t\t\t\tthis._openList.add(neighbor);\n\t\t\t}\n\t\t\t// down\n\t\t\tneighbor = this.grid[node.gridX][node.gridY+1] || null;\n\t\t\tif (neighbor && neighbor.open && neighbor.passable) {\n\t\t\t\tneighbor.cost = current.cost + 1;\n\t\t\t\tneighbor.open = false;\n\t\t\t\tthis._openList.add(neighbor);\n\t\t\t}\n\t\t\t// i++; // DEBUG\n\t\t}\n\n\t\t// recalculate the vector field\n\t\tfor (i = 0; i < this.widthInCells; i++) {\n\t\t\tfor (j = 0; j < this.heightInCells; j++) {\n\t\t\t\tv = this.grid[i][j];\n\n\t\t\t\ta = i-1 >= 0 && this.grid[i-1][j].passable ? this.grid[i-1][j].cost : v.cost;\n\t\t\t\tb = i+1 < this.widthInCells && this.grid[i+1][j].passable ? this.grid[i+1][j].cost : v.cost;\n\t\t\t\tv.x = a - b;\n\n\t\t\t\ta = j-1 >= 0 && this.grid[i][j-1].passable ? this.grid[i][j-1].cost : v.cost;\n\t\t\t\tb = j+1 < this.heightInCells && this.grid[i][j+1].passable ? this.grid[i][j+1].cost : v.cost;\n\t\t\t\tv.y = a - b;\n\t\t\t}\n\t\t}\n\t\t// TODO: normalize values\n\n\t\t// console.log('[FlowGrid.regenHeatmap] Completed in '+i+' iterations:');\n\t\t// console.log(this.toString());\n\t},\n\n\tdraw: function(ctx) {\n\t\tvar i, j, v, vx, vy;\n\t\tctx.lineWidth = 1;\n\t\tfor (i = 0; i < this.widthInCells; i++) {\n\t\t\tfor (j = 0; j < this.heightInCells; j++) {\n\t\t\t\tctx.strokeStyle = 'rgba(0, 0, 0, 0.4)';\n\t\t\t\tctx.fillStyle = 'rgba(0, 0, 0, 0.3)';\n\t\t\t\tv = this.grid[i][j];\n\t\t\t\tif (!v.passable) continue;\n\n\t\t\t\tvx = (i*this.cellPixelSize)+(this.cellPixelSize*0.5);\n\t\t\t\tvy = (j*this.cellPixelSize)+(this.cellPixelSize*0.5);\n\n\t\t\t\tctx.beginPath();\n\t\t\t\tctx.arc(vx, vy, 3, 0, mh.util.TAU, false);\n\t\t\t\tctx.fill();\n\t\t\t\tctx.moveTo(vx, vy);\n\t\t\t\tctx.lineTo(vx+(v.x*11), vy+(v.y*11));\n\t\t\t\tctx.stroke();\n\n\t\t\t\t// ctx.strokeStyle = 'rgba(120, 0, 0, 0.5)';\n\t\t\t\t// ctx.strokeRect(i*this.cellPixelSize, j*this.cellPixelSize, this.cellPixelSize, this.cellPixelSize);\n\t\t\t}\n\t\t}\n\t},\n\n\t/**\n\t * Given the pixel coordinates, return the Vec2 associated with that position.\n\t */\n\tgetVectorAt: function(pos) {\n\t\tvar x = ~~(pos.x * this._sizeMulti);\n\t\tvar y = ~~(pos.y * this._sizeMulti);\n\t\tif (this.grid[x] && this.grid[x][y]) {\n\t\t\treturn this.grid[x][y];\n\t\t}\n\t\treturn null;\n\t},\n\n\t/**\n\t * Flips the flow switch at the provided pixel coordinates, so it will either become passable, or not.\n\t */\n\tsetBlockAt: function(x, y) {\n\t\tx = ~~(x * this._sizeMulti);\n\t\ty = ~~(y * this._sizeMulti);\n\t\tthis.grid[x][y].passable = !this.grid[x][y].passable;\n\t\tthis.grid[x][y].cost = -1;\n\n\t\tthis.build();\n\n\t\treturn !this.grid[x][y].passable;\n\t},\n\n\tclear: function() {\n\t\tvar i, j, v;\n\t\tfor (i = 0; i < this.widthInCells; i++) {\n\t\t\tfor (j = 0; j < this.heightInCells; j++) {\n\t\t\t\tv = this.grid[i][j];\n\t\t\t\tv.passable = true;\n\t\t\t\tv.cost = -1;\n\t\t\t}\n\t\t}\n\t\tthis.build();\n\t},\n\n\ttoString: function() {\n\t\tvar str = '', x = 0, y = 0,\n\t\t\ti, v;\n\n\t\tfor (i = 0; i < this.numCells; i++) {\n\t\t\tv = this.grid[x][y].cost;\n\n\t\t\tif (v > 99) str += v + ',';\n\t\t\telse if (v > 9 && v < 100) str += ' ' + v + ',';\n\t\t\telse str += '  ' + v + ',';\n\n\t\t\tif (++x === this.widthInCells) {\n\t\t\t\tx = 0;\n\t\t\t\ty++;\n\t\t\t\tstr += '\\n';\n\t\t\t}\n\t\t}\n\t\tstr = str.substring(0, str.length-2); // get rid of the trailing comma because i'm ocd or something\n\t\treturn str;\n\t},\n\n\tlog: function() {\n\t\tconsole.log(this.toString());\n\t}\n};\n\nmh.FlowGridNode = function(gx, gy) {\n\t// velocity\n\tthis.x = 0;\n\tthis.y = 0;\n\n\tthis.gridX = gx;\n\tthis.gridY = gy;\n\n\t// heat value\n\tthis.cost = 0;\n\tthis.open = true;\n\tthis.passable = true;\n\n\tthis.uuid = Date.now() + '' + Math.floor(Math.random()*1000);\n};\n","mh.Point = function(x, y, z) {\n\tthis.x = x || 0;\n\tthis.y = y || 0;\n\tthis.z = z || 0;\n};\n\nmh.Point.prototype = {\n\tconstructor: mh.Point,\n\n\tcopy: function(p) {\n\t\tthis.x = p.x;\n\t\tthis.y = p.y;\n\t\tthis.z = p.z;\n\t},\n\n\tclone: function() {\n\t\treturn new mh.Point(this.x, this.y, this.z);\n\t},\n\n\ttoString: function() {\n\t\treturn '[Point (x='+this.x+' y='+this.y+' z='+this.z+')]';\n\t}\n};\n","mh.Rectangle = function(x, y, width, height) {\n\tx = x || 0;\n\ty = y || 0;\n\twidth = width || 0;\n\theight = height || 0;\n\n\tthis.x = x;\n\tthis.y = y;\n\tthis.width = width;\n\tthis.height = height;\n};\n\nmh.Rectangle.prototype = {\n\tconstructor: mh.Rectangle,\n\n\tcopy: function(source) {\n\t\tthis.x = source.x;\n\t\tthis.y = source.y;\n\t\tthis.width = source.width;\n\t\tthis.height = source.height;\n\t\treturn this;\n\t},\n\n\tclone: function() {\n\t\treturn new mh.Rectangle(this.x, this.y, this.width, this.height);\n\t},\n\n\tinflate: function(dx, dy) {\n\t\tthis.x -= dx;\n\t\tthis.width += 2 * dx;\n\t\tthis.y -= dy;\n\t\tthis.height += 2 * dy;\n\t\treturn this;\n\t},\n\n\ttoString: function() {\n\t\treturn '[Rectangle (x=' + this.x + ' y=' + this.y + ' width=' + this.width + ' height=' + this.height + ' empty=' + this.empty + ')]';\n\t}\n};\n","/*\n\tSets up and manages a THREEjs container, camera, and light, making it easy to get going.\n\tAlso provides camera control.\n\tAssumes full screen.\n\t@author Corey Birnbaum http://coldconstructs.com/ @vonWolfehaus\n */\nmh.Scene = function(sceneConfig, controlConfig) {\n\tvar sceneSettings = {\n\t\telement: document.body,\n\t\talpha: true,\n\t\tantialias: true,\n\t\tclearColor: '#fff',\n\t\tsortObjects: false,\n\t\tfog: null,\n\t\tlight: new THREE.DirectionalLight(0xffffff),\n\t\tlightPosition: null,\n\t\tcameraType: 'PerspectiveCamera',\n\t\tcameraPosition: null, // {x, y, z}\n\t\torthoZoom: 4\n\t};\n\n\tvar controlSettings = {\n\t\tminDistance: 100,\n\t\tmaxDistance: 1000,\n\t\tzoomSpeed: 2,\n\t\tnoZoom: false\n\t};\n\n\tsceneSettings = mh.util.merge(sceneSettings, sceneConfig);\n\tif (typeof controlConfig !== 'boolean') {\n\t\tcontrolSettings = mh.util.merge(controlSettings, controlConfig);\n\t}\n\n\tthis.renderer = new THREE.WebGLRenderer({\n\t\talpha: sceneSettings.alpha,\n\t\tantialias: sceneSettings.antialias\n\t});\n\tthis.renderer.setClearColor(sceneSettings.clearColor, 0);\n\tthis.renderer.sortObjects = sceneSettings.sortObjects;\n\n\tthis.width = window.innerWidth;\n\tthis.height = window.innerHeight;\n\n\tthis.orthoZoom = sceneSettings.orthoZoom;\n\n\tthis.container = new THREE.Scene();\n\tthis.container.fog = sceneSettings.fog;\n\n\tthis.container.add(new THREE.AmbientLight(0xdddddd));\n\n\tif (!sceneSettings.lightPosition) {\n\t\tsceneSettings.light.position.set(-1, 1, -1).normalize();\n\t}\n\tthis.container.add(sceneSettings.light);\n\n\tif (sceneSettings.cameraType === 'OrthographicCamera') {\n\t\tvar width = window.innerWidth / this.orthoZoom;\n\t\tvar height = window.innerHeight / this.orthoZoom;\n\t\tthis.camera = new THREE.OrthographicCamera(width / -2, width / 2, height / 2, height / -2, 1, 5000);\n\t}\n\telse {\n\t\tthis.camera = new THREE.PerspectiveCamera(50, this.width / this.height, 1, 5000);\n\t}\n\n\tthis.contolled = !!controlConfig;\n\tif (this.contolled) {\n\t\tthis.controls = new THREE.OrbitControls(this.camera, this.renderer.domElement);\n\t\tthis.controls.minDistance = controlSettings.minDistance;\n\t\tthis.controls.maxDistance = controlSettings.maxDistance;\n\t\tthis.controls.zoomSpeed = controlSettings.zoomSpeed;\n\t\tthis.controls.noZoom = controlSettings.noZoom;\n\t}\n\n\tif (sceneSettings.cameraPosition) {\n\t\tthis.camera.position.copy(sceneSettings.cameraPosition);\n\t}\n\n\twindow.addEventListener('resize', function onWindowResize() {\n\t\tthis.width = window.innerWidth;\n\t\tthis.height = window.innerHeight;\n\t\tif (this.camera.type === 'OrthographicCamera') {\n\t\t\tvar width = this.width / this.orthoZoom;\n\t\t\tvar height = this.height / this.orthoZoom;\n\t\t\tthis.camera.left = width / -2;\n\t\t\tthis.camera.right = width / 2;\n\t\t\tthis.camera.top = height / 2;\n\t\t\tthis.camera.bottom = height / -2;\n\t\t}\n\t\telse {\n\t\t\tthis.camera.aspect = this.width / this.height;\n\t\t}\n\t\tthis.camera.updateProjectionMatrix();\n\t\tthis.renderer.setSize(this.width, this.height);\n\t}.bind(this), false);\n\n\tthis.attachTo(sceneSettings.element);\n};\n\nmh.Scene.prototype = {\n\tconstructor: mh.Scene,\n\n\tattachTo: function(element) {\n\t\telement.style.width = this.width + 'px';\n\t\telement.style.height = this.height + 'px';\n\t\tthis.renderer.setPixelRatio(window.devicePixelRatio);\n\t\tthis.renderer.setSize(this.width, this.height);\n\t\telement.appendChild(this.renderer.domElement);\n\t},\n\n\tadd: function(mesh) {\n\t\tthis.container.add(mesh);\n\t},\n\n\tremove: function(mesh) {\n\t\tthis.container.remove(mesh);\n\t},\n\n\trender: function() {\n\t\tif (this.contolled) this.controls.update();\n\t\tthis.renderer.render(this.container, this.camera);\n\t},\n\n\tupdateOrthoZoom: function() {\n\t\tif (this.orthoZoom <= 0) {\n\t\t\tthis.orthoZoom = 0;\n\t\t\treturn;\n\t\t}\n\t\tvar width = this.width / this.orthoZoom;\n\t\tvar height = this.height / this.orthoZoom;\n\t\tthis.camera.left = width / -2;\n\t\tthis.camera.right = width / 2;\n\t\tthis.camera.top = height / 2;\n\t\tthis.camera.bottom = height / -2;\n\t\tthis.camera.updateProjectionMatrix();\n\t},\n\n\tfocusOn: function(obj) {\n\t\tthis.camera.lookAt(obj.position);\n\t}\n};\n","/*\n\tSimple array 2D TileMap. Collision is done by adding/removing collider components to the system at grid positions that have less than 3 neighbors.\n\n\t@author Corey Birnbaum http://coldconstructs.com/ @vonWolfehaus\n*/\nmh.TileMap2 = function(tileSize, tilesprite) {\n\tthis.widthInTiles = Math.floor(mh.kai.width / tileSize) + 1;\n\tthis.heightInTiles = Math.floor(mh.kai.height / tileSize) + 1;\n\n\tthis.numTiles = this.widthInTiles * this.heightInTiles;\n\tthis.grid = [];\n\n\t// internal\n\tthis._blockCache = new mh.LinkedList(),\n\tthis._blockLookup = {},\n\tthis._ctx = null,\n\tthis._sizeMulti = 1 / tileSize;\n\tthis.tileSize = tileSize;\n\tthis.tilesprite = tilesprite;\n\n\t/*var canvas = document.getElementById('tilemap');\n\tcanvas.width = window.innerWidth;\n\tcanvas.height = window.innerHeight;\n\tthis._ctx = canvas.getContext('2d');\n\n\tfor (var i = 0; i < _self.numTiles; i++) {\n\t\t_self.grid[i] = 0;\n\t}\n\n\tmh.kai.map = _self;\n\n\tconsole.log('[TileMap2] '+_self.widthInTiles+'x'+_self.heightInTiles);\n\t// console.log(_self.toString());*/\n};\n\nmh.TileMap2.prototype = {\n\tconstuctor: mh.TileMap2,\n\t/**\n\t * Add or remove a tile at the given pixel coordinates.\n\t * @returns [boolean] If a tile was changed.\n\t */\n\tsetTile: function(x, y, forceValue) {\n\t\tvar idx, tile, block, px, py;\n\n\t\tforceValue = forceValue || null;\n\t\tx = ~~(x * this._sizeMulti);\n\t\ty = ~~(y * this._sizeMulti);\n\t\tidx = (x * this.heightInTiles) + y;\n\t\tif (idx < 0 || idx >= this.numTiles) return false;\n\n\t\tpx = x * this.tileSize;\n\t\tpy = y * this.tileSize;\n\t\ttile = this.grid[idx];\n\t\tif (forceValue && tile === forceValue) return false;\n\t\t// console.log('[TileMap2.setTile] '+x+', '+y+'; '+tile);\n\n\t\tif (tile > 0) {\n\t\t\tthis.grid[idx] = 0;\n\t\t\tthis._ctx.clearRect(px, py, this.tileSize, this.tileSize);\n\n\t\t\t// kill the block\n\t\t\tblock = this._blockLookup[px+'-'+py];\n\t\t\tthis._blockCache.add(block);\n\t\t\tblock.disable();\n\t\t\tdelete this._blockLookup[px+'-'+py];\n\n\t\t}\n\t\telse {\n\t\t\tthis.grid[idx] = 1;\n\t\t\tthis._ctx.drawImage(this.tilesprite, px, py);\n\n\t\t\t// add a block to the grid\n\t\t\tif (this._blockCache.length) {\n\t\t\t\tblock = this._blockCache.pop();\n\t\t\t\tblock.position.x = px+25;\n\t\t\t\tblock.position.y = py+25;\n\t\t\t}\n\t\t\telse {\n\t\t\t\tblock = new mh.Block(px+25, py+25);\n\t\t\t\tblock.collider.setMass(0);\n\t\t\t}\n\n\t\t\tblock.enable();\n\t\t\tthis._blockLookup[px+'-'+py] = block;\n\t\t}\n\n\t\t// console.log(this.toString());\n\t\treturn true;\n\t},\n\n\tgetTile: function(x, y) {\n\t\tvar idx;\n\t\tx = ~~(x * this._sizeMulti);\n\t\ty = ~~(y * this._sizeMulti);\n\t\tidx = (x * this.heightInTiles) + y;\n\t\tif (idx < 0 || idx >= this.numTiles) return null;\n\n\t\treturn this.grid[idx];\n\t},\n\n\tclear: function() {\n\t\tvar block;\n\t\tfor (var id in this._blockLookup) {\n\t\t\tvar str = id.split('-');\n\t\t\tvar x = ~~(parseInt(str[0], 10) * this._sizeMulti);\n\t\t\tvar y = ~~(parseInt(str[1], 10) * this._sizeMulti);\n\t\t\tvar idx = (x * this.heightInTiles) + y;\n\n\t\t\tthis.grid[idx] = 0;\n\t\t\tblock = this._blockLookup[id];\n\t\t\tthis._ctx.clearRect(block.position.x-25, block.position.y-25, this.tileSize, this.tileSize);\n\n\t\t\tthis._blockCache.add(block);\n\t\t\tblock.disable();\n\t\t\tdelete this._blockLookup[id];\n\t\t}\n\t},\n\n\ttoString: function() {\n\t\tvar str = '', x = 0, y = 0,\n\t\t\ti, v;\n\n\t\tfor (i = 0; i < this.numTiles; i++) {\n\t\t\tv = this.grid[~~((x * this.heightInTiles) + y)];\n\n\t\t\tif (v > 9 && v < 100) str += v + ',';\n\t\t\telse str += ' ' + v + ',';\n\n\t\t\tif (++x === this.widthInTiles) {\n\t\t\t\tx = 0;\n\t\t\t\ty++;\n\t\t\t\tstr += '\\n';\n\t\t\t}\n\t\t}\n\t\tstr = str.substring(0, str.length-2); // get rid of the trailing comma because i'm ocd or something\n\t\treturn str;\n\t}\n};\n","/**\n * Optimized 2D general-purpose vector class with fairly complete functionality.\n */\nmh.Vec2 = function(x, y) {\n\tthis.x = x || 0;\n\tthis.y = y || 0;\n};\n\nmh.Vec2.draw = function(ctx, v1, v2, drawingColor, camOffsetX, camOffsetY) {\n\tcamOffsetX = camOffsetX || 0;\n\tcamOffsetY = camOffsetY || 0;\n\tctx.strokeStyle = drawingColor ? drawingColor : 'rgb(250, 10, 10)';\n\tctx.beginPath();\n\tctx.moveTo(v1.x + camOffsetX, v1.y + camOffsetY);\n\tctx.lineTo(v2.x + camOffsetX, v2.y + camOffsetY);\n\tctx.stroke();\n};\n\nmh.Vec2.prototype = {\n\tconstructor: mh.Vec2,\n\n\t/*\n\t * Sets the length which will change x and y, but not the angle.\n\t */\n\tsetLength: function(value) {\n\t\tvar oldLength = this.getLength();\n\t\tif (oldLength !== 0 && value !== oldLength) {\n\t\t\tthis.multiplyScalar(value / oldLength);\n\t\t}\n\t\treturn this;\n\t},\n\n\tgetLength: function() {\n\t\treturn Math.sqrt((this.x * this.x) + (this.y * this.y));\n\t},\n\n\tgetLengthSq: function() {\n\t\treturn (this.x * this.x) + (this.y * this.y);\n\t},\n\n\tsetAngle: function(value) {\n\t\tvar len = this.getAngle();\n\t\tthis.x = Math.cos(value) * len;\n\t\tthis.y = Math.sin(value) * len;\n\t\treturn this;\n\t},\n\n\tgetAngle: function() {\n\t\treturn Math.atan2(this.y, this.x);\n\t},\n\n\trotateBy: function(theta) {\n\t\tvar x = this.x, y = this.y;\n\t\tvar cos = Math.cos(theta), sin = Math.sin(theta);\n\t\tthis.x = x * cos - y * sin;\n\t\tthis.y = x * sin + y * cos;\n\t\treturn this;\n\t},\n\n\tadd: function(v) {\n\t\tthis.x += v.x;\n\t\tthis.y += v.y;\n\t\treturn this;\n\t},\n\n\taddScalar: function(s) {\n\t\tthis.x += s;\n\t\tthis.y += s;\n\t\treturn this;\n\t},\n\n\tsubtract: function(v) {\n\t\tthis.x -= v.x;\n\t\tthis.y -= v.y;\n\t\treturn this;\n\t},\n\n\tsubtractScalar: function(s) {\n\t\tthis.x -= s;\n\t\tthis.y -= s;\n\t\treturn this;\n\t},\n\n\tmultiply: function(v) {\n\t\tthis.x *= v.x;\n\t\tthis.y *= v.y;\n\t\treturn this;\n\t},\n\n\tmultiplyScalar: function(s) {\n\t\tthis.x *= s;\n\t\tthis.y *= s;\n\t\treturn this;\n\t},\n\n\tdivide: function(v) {\n\t\tif (v.x === 0 || v.y === 0) return this;\n\t\tthis.x /= v.x;\n\t\tthis.y /= v.y;\n\t\treturn this;\n\t},\n\n\tdivideScalar: function(s) {\n\t\tif (s === 0) return this;\n\t\tthis.x /= s;\n\t\tthis.y /= s;\n\t\treturn this;\n\t},\n\n\t/**\n\t * Calculate the perpendicular vector (normal).\n\t */\n\tperp: function() {\n\t\tvar nx = -this.y;\n\t\tthis.y = this.x;\n\t\tthis.x = nx;\n\t\treturn this;\n\t},\n\n\tnegate: function() {\n\t\tthis.x = -this.x;\n\t\tthis.y = -this.y;\n\t\treturn this;\n\t},\n\n\t/**\n\t * This function assumes min < max, if this assumption isn't true it will not operate correctly.\n\t */\n\tclamp: function(min, max) {\n\t\tif (this.x < min.x) {\n\t\t\tthis.x = min.x;\n\t\t}\n\t\telse if (this.x > max.x) {\n\t\t\tthis.x = max.x;\n\t\t}\n\t\tif (this.y < min.y) {\n\t\t\tthis.y = min.y;\n\t\t}\n\t\telse if (this.y > max.y) {\n\t\t\tthis.y = max.y;\n\t\t}\n\t\treturn this;\n\t},\n\n\t/**\n\t * Calculate a vector dot product.\n\t * @param {Vector2D} v A vector\n\t * @return {Number} The dot product\n\t */\n\tdotProduct: function(v) {\n\t\treturn (this.x * v.x + this.y * v.y);\n\t},\n\n\t/**\n\t * Calculate the cross product of this and another vector.\n\t * @param {Vector2D} v A vector\n\t * @return {Number} The cross product\n\t */\n\tcrossProd: function(v) {\n\t\treturn this.x * v.y - this.y * v.x;\n\t},\n\n\ttruncate: function(max) {\n\t\tvar l = this.getLength();\n\t\tif (l === 0 || l < max) return this;\n\t\tthis.x /= l;\n\t\tthis.y /= l;\n\t\tthis.multiplyScalar(max);\n\t\treturn this;\n\t},\n\n\tangleTo: function(v) {\n\t\tvar dx = this.x - v.x,\n\t\t\tdy = this.y - v.y;\n\t\treturn Math.atan2(dy, dx);\n\t},\n\n\tdistanceTo: function(v) {\n\t\tvar dx = this.x - v.x,\n\t\t\tdy = this.y - v.y;\n\t\treturn Math.sqrt((dx * dx) + (dy * dy));\n\t},\n\n\tdistanceToSquared: function(v) {\n\t\tvar dx = this.x - v.x,\n\t\t\tdy = this.y - v.y;\n\t\treturn dx * dx + dy * dy;\n\t},\n\n\tlerp: function(v, alpha) {\n\t\tthis.x += (v.x - this.x) * alpha;\n\t\tthis.y += (v.y - this.y) * alpha;\n\t\treturn this;\n\t},\n\n\t/**\n\t * Normalize the vector\n\t * @return {Vector2D}\n\t */\n\tnormalize: function() {\n\t\tvar length = this.getLength();\n\t\tif (length === 0) return this;\n\t\tthis.x /= length;\n\t\tthis.y /= length;\n\t\treturn this;\n\t},\n\n\tset: function(x, y) {\n\t\tx = x ? x : 0;\n\t\ty = y ? y : 0;\n\t\tthis.x = x;\n\t\tthis.y = y;\n\t\treturn this;\n\t},\n\n\tequals: function(v) {\n\t\tif (this.x === v.x && this.y === v.y) return true;\n\t\treturn false;\n\t},\n\n\t/**\n\t * Copy from given Vector.\n\t */\n\tcopy: function(v) {\n\t\tthis.x = v.x;\n\t\tthis.y = v.y;\n\t\treturn this;\n\t},\n\n\t/**\n\t * Return a new Vector object using this as a start.\n\t */\n\tclone: function() {\n\t\treturn new mh.Vec2(this.x, this.y);\n\t},\n\n\t/**\n\t * Visualize this vector.\n\t * @param {type} context \t\t\tHTML canvas 2D context to draw to.\n\t * @param {type} [startX] \t\t\tX offset to draw from.\n\t * @param {type} [startY] \t\t\tY offset to draw from.\n\t * @param {type} [drawingColor] \tCSS-compatible color to use.\n\t */\n\tdraw: function(ctx, startX, startY, drawingColor) {\n\t\tstartX = startX ? startX : 0;\n\t\tstartY = startY ? startY : 0;\n\t\tdrawingColor = drawingColor ? drawingColor : 'rgb(0, 250, 0)';\n\n\t\tctx.strokeStyle = drawingColor;\n\t\tctx.beginPath();\n\t\tctx.moveTo(startX, startY);\n\t\tctx.lineTo(this.x, this.y);\n\t\tctx.stroke();\n\t},\n\n\ttoString: function() {\n\t\treturn '['+this.x+', '+this.y+']';\n\t}\n};\n","/*\n\n\t@author Corey Birnbaum http://coldconstructs.com/ @vonWolfehaus\n*/\nmh.VectorFieldState = function(entity) {\n\tthis.uuid = mh.util.generateID();\n\n\tthis.fieldID = -1; // flow field index (as it sits in the array)\n\tthis.reachedGoal = true;\n\n\tmh.kai.addComponent(entity, mh.Component.FLOCK, mh.Flock);\n\n\t// shared references\n\tvar _position = entity.position,\n\t\t_vecField = mh.kai.flow;\n\n\t// internal settings\n\t// always best to use a timer to spread out the processing for expensive ops, especially when the user won't notice it\n\tvar _pollTime = 12,\n\t\t_timer = Math.ceil(Math.random() * _pollTime);\n\n\n\tthis.update = function() {\n\t\tvar node;\n\t\t_timer--;\n\t\tif (_timer < 0 && !this.reachedGoal) {\n\t\t\t_timer = _pollTime;\n\n\t\t\tif (_position.distanceTo(mh.kai.flow.goalPixels) < 100) {\n\t\t\t\t// console.log('reached goal');\n\t\t\t\tthis.reachedGoal = true;\n\t\t\t}\n\t\t\telse {\n\t\t\t\tnode = entity.flock.nearby.first;\n\t\t\t\twhile (node) {\n\t\t\t\t\tif (!node.obj.vecFieldState) {\n\t\t\t\t\t\tnode = node.next;\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\n\t\t\t\t\tif (node.obj.vecFieldState.reachedGoal) {\n\t\t\t\t\t\t// console.log('neighbor reached goal');\n\t\t\t\t\t\tthis.reachedGoal = true;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t\tnode = node.next;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn _vecField.getVectorAt(_position, this.fieldID);\n\t};\n\n\tthis.destroy = function() {\n\t\t_vecField = null;\n\t\t_position = null;\n\t\tentity = null;\n\t};\n};\n","/*\n\t\"Boid\" behavior algorithms for more natural entity movement.\n\t@author Corey Birnbaum http://coldconstructs.com/ @vonWolfehaus\n*/\nmh.steering = {\n\t// cache of objects for reuse; there are a set for each function so they don't get overwritten\n\t_sumForce: new mh.Vec2(),\n\t_desiredVec: new mh.Vec2(),\n\t_scratchVec: new mh.Vec2(),\n\n\t_wanderVec: new mh.Vec2(),\n\t_seperationForce: new mh.Vec2(),\n\t_cohereForce: new mh.Vec2(),\n\t_alignForce: new mh.Vec2(),\n\t_wanderAngle: 0,\n\n\tseek: function(agent, dest, slowingRadius) {\n\t\tvar distance = agent.position.distanceTo(dest);\n\t\tslowingRadius = slowingRadius || 0;\n\n\t\tif (distance < 7) {\n\t\t\t// friction should bring the agent to a full stop\n\t\t\tagent.velocity.multiplyScalar(0.9);\n\t\t\treturn;\n\t\t}\n\n\t\tthis._desiredVec.copy(dest).subtract(agent.position);\n\t\tthis._desiredVec.normalize();\n\n\t\tif (distance < slowingRadius) {\n\t\t\tthis._desiredVec.multiplyScalar(agent.maxForce * (distance / slowingRadius));\n\t\t\tagent.velocity.multiplyScalar(0.9); // apply friction to fight velocity (ie brake)\n\t\t}\n\t\telse {\n\t\t\tthis._desiredVec.multiplyScalar(agent.maxForce);\n\t\t}\n\n\t\tagent.steeringForce.add(this._desiredVec);\n\t},\n\n\tflee: function(agent, dest) {\n\t\tthis._desiredVec.copy(agent.position).subtract(dest);\n\t\tthis._desiredVec.normalize().multiplyScalar(agent.maxForce);\n\n\t\tagent.steeringForce.add(this._desiredVec);\n\t},\n\n\talign: function(agent, flock) {\n\t\tvar a, distance, neighboursCount = 0;\n\t\tvar node = flock.first;\n\t\tthis._alignForce.x = 0;\n\t\tthis._alignForce.y = 0;\n\n\t\t// for each of our neighbors (including self)...\n\t\twhile (node) {\n\t\t\ta = node.obj.entity.boid;\n\t\t\tif (a.groupID !== agent.groupID) {\n\t\t\t\tnode = node.next;\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tdistance = agent.position.distanceTo(a.position);\n\t\t\t// ...that are within the max distance and are moving...\n\t\t\tif (distance < agent.maxCohesion && a.velocity.getLength() > 0) {\n\t\t\t\t// ...sum up our headings\n\t\t\t\tthis._scratchVec.copy(a.velocity);\n\t\t\t\tthis._scratchVec.normalize();\n\t\t\t\tthis._alignForce.add(this._scratchVec);\n\t\t\t\t// also check if they're where we want to be and call it good\n\t\t\t\tif (a._arrived) agent._arrived = true;\n\t\t\t\tneighboursCount++;\n\t\t\t}\n\t\t\tnode = node.next;\n\t\t}\n\n\t\tif (neighboursCount === 0) {\n\t\t\treturn this._alignForce; // zero\n\t\t}\n\n\t\t// divide to get the average heading\n\t\tthis._alignForce.divideScalar(neighboursCount);\n\t\tthis._alignForce.multiplyScalar(agent.maxForce);\n\n\t\treturn this._alignForce;\n\t},\n\n\tcohere: function(agent, flock) {\n\t\tvar a, distance,\n\t\t\tneighboursCount = 0,\n\t\t\tnode = flock.first;\n\n\t\tthis._sumForce.x = 0;\n\t\tthis._sumForce.y = 0;\n\n\t\twhile (node) {\n\t\t\ta = node.obj.entity.boid;\n\t\t\tif (a !== agent && a.groupID === agent.groupID) {\n\t\t\t\tdistance = agent.position.distanceTo(a.position);\n\t\t\t\tif (distance < agent.maxCohesion) {\n\t\t\t\t\t// sum up the position of our neighbors\n\t\t\t\t\tthis._sumForce.add(a.position);\n\t\t\t\t\tif (a._arrived) agent._arrived = true;\n\t\t\t\t\tneighboursCount++;\n\t\t\t\t}\n\t\t\t}\n\t\t\tnode = node.next;\n\t\t}\n\n\t\tif (neighboursCount === 0) {\n\t\t\tthis._cohereForce.x = 0;\n\t\t\tthis._cohereForce.y = 0;\n\t\t\treturn;\n\t\t}\n\n\t\t// get the average position of ourself and our neighbors\n\t\tthis._sumForce.divideScalar(neighboursCount);\n\n\t\t// seek that position\n\t\tthis._cohereForce.copy(this._sumForce).subtract(agent.position);\n\t\tthis._cohereForce.normalize().multiplyScalar(agent.maxForce);\n\n\t\treturn this._cohereForce;\n\t},\n\n\tseparate: function(agent, flock) {\n\t\tvar neighboursCount = 0;\n\t\tvar node = flock.first;\n\n\t\tthis._seperationForce.x = 0;\n\t\tthis._seperationForce.y = 0;\n\n\t\twhile (node) {\n\t\t\tvar a = node.obj.entity.boid;\n\t\t\tif (a !== agent) {\n\t\t\t\tvar distance = agent.position.distanceTo(a.position);\n\t\t\t\tif (distance < agent.minSeparation && distance > 0) {\n\t\t\t\t\t// vector to other agent\n\t\t\t\t\tthis._scratchVec.copy(a.position).subtract(agent.position);\n\t\t\t\t\t// var length = this._scratchVec.normalize();\n\t\t\t\t\tvar length = this._scratchVec.getLength();\n\t\t\t\t\tvar r = agent.minSeparation + a.minSeparation;\n\n\t\t\t\t\tthis._scratchVec.multiplyScalar(1 - ((length - r) / (agent.minSeparation - r)));\n\t\t\t\t\tthis._seperationForce.x += this._scratchVec.x;\n\t\t\t\t\tthis._seperationForce.y += this._scratchVec.y;\n\n\t\t\t\t\tneighboursCount++;\n\t\t\t\t}\n\t\t\t}\n\t\t\tnode = node.next;\n\t\t}\n\n\t\tif (neighboursCount === 0) {\n\t\t\treturn this._seperationForce;\n\t\t}\n\n\t\tthis._seperationForce.multiplyScalar(agent.maxForce / neighboursCount);\n\n\t\treturn this._seperationForce;\n\t},\n\n\twander: function(agent) {\n\t\tthis._desiredVec.copy(agent.velocity);\n\t\tthis._desiredVec.normalize();\n\t\tthis._desiredVec.multiplyScalar(agent.targetDistance);\n\n\t\tthis._scratchVec.reset(0, -1);\n\t\tthis._scratchVec.multiplyScalar(agent.targetRadius);\n\t\tthis._scratchVec.setAngle(agent._wanderAngle);\n\n\t\tagent._wanderAngle += (Math.random() * agent.angleJitter) - (agent.angleJitter * 0.5);\n\n\t\tthis._desiredVec.add(this._scratchVec);\n\t\tagent.steeringForce.add(this._desiredVec);\n\t},\n\n\n\t/*-------------------------------------------------------------------------------\n\t\t\t\t\t\t\t\t\tCOMPOSITE BEHAVIORS\n\t-------------------------------------------------------------------------------*/\n\n\tflock: function(agent, flock) {\n\t\tthis.separate(agent, flock);\n\t\tthis.align(agent, flock);\n\t\tthis.cohere(agent, flock);\n\t\tthis._seperationForce.multiplyScalar(0.2);\n\t\tthis._alignForce.multiplyScalar(1.3);\n\t\tthis._cohereForce.multiplyScalar(0.6);\n\t\tagent.steeringForce.x += this._seperationForce.x + this._alignForce.x + this._cohereForce.x;\n\t\tagent.steeringForce.y += this._seperationForce.y + this._alignForce.y + this._cohereForce.y;\n\t},\n\n\tfollowPath: function(agent, path, repeat) {\n\t\tvar target = path[agent._currentPathNode];\n\n\t\tif (agent._arrived || agent.position.distanceTo(target) <= agent.pathArriveRadius) {\n\t\t\tagent._currentPathNode += agent._pathDir;\n\t\t\tagent._arrived = false;\n\n\t\t\tif (agent._currentPathNode >= path.length || agent._currentPathNode < 0) {\n\t\t\t\tif (repeat) {\n\t\t\t\t\tagent._pathDir *= -1;\n\t\t\t\t\tagent._currentPathNode += agent._pathDir;\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\tagent._currentPathNode = path.length - 1;\n\t\t\t\t\ttarget = path[agent._currentPathNode];\n\t\t\t\t\tagent._arrived = true;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tthis.seek(agent, target, agent.slowingRadius);\n\t},\n\n\tpursue: function(agent, targetAgent) {\n\t\t// calculate future position of target\n\t\tthis._scratchVec.copy(targetAgent.position).add(targetAgent.velocity);\n\t\tthis._scratchVec.multiplyScalar(agent.distanceTo(targetAgent) / agent.maxForce);\n\t\t// and seek that instead\n\t\tthis.seek(agent, this._scratchVec);\n\t},\n\n\tevade: function(agent, pursuingAgent) {\n\t\tthis._scratchVec.copy(pursuingAgent.position).add(pursuingAgent.velocity);\n\t\tthis._scratchVec.multiplyScalar(agent.distanceTo(pursuingAgent) / agent.maxForce);\n\n\t\tthis.flee(agent, this._scratchVec);\n\t},\n\n\t/*followLeader: function(agent, leader, flock) {\n\t\tvar tv :Vector3D = leader.velocity.clone();\n\t\tvar force :Vector3D = new Vector3D();\n\n\t\ttv.normalize();\n\t\ttv.scaleBy(LEADER_BEHIND_DIST);\n\n\t\tahead = leader.position.clone().add(tv);\n\n\t\ttv.scaleBy(-1);\n\t\tbehind = leader.position.clone().add(tv);\n\n\t\tif (isOnLeaderSight(leader, ahead)) {\n\t\t\talpha = 0.4;\n\t\t\tforce = force.add(evade(leader));\n\t\t\tforce.scaleBy(1.8); // make evade force stronger...\n\t\t} else {\n\t\t\talpha = 1;\n\t\t}\n\n\t\tforce = force.add(arrive(behind, 50));\n\t\tforce = force.add(separation(agent, flock));\n\n\t\tagent.steeringForce.add(this._desiredVec);\n\t}*/\n};\n","/*\n\tDEPRECATED in favor of von-physics\n\tScans the collision grid using `getNeighbors` so it finds nearest entity (any entity).\n\t@author Corey Birnbaum http://coldconstructs.com/ @vonWolfehaus\n*/\nmh.GridTargeter = function(entity, settings) {\n\tsettings = settings || {};\n\tmh.Base.call(this);\n\n\t// attributes\n\tthis.searchInterval = 1000;\n\tthis.scanRadius = 400;\n\tthis.collisionId = entity.collisionId;\n\tthis.target = null;\n\n\t// attribute override\n\tmh.util.overwrite(this, settings);\n\n\t// private properties\n\tthis.entity = entity;\n\tthis._nearby = new mh.LinkedList();\n\tthis._grid = mh.world.broadphase;\n\tthis._timer = 0;\n\n\t// prerequisite components\n\tthis.position = entity.position;\n};\n\n// required statics for component system\nmh.GridTargeter.accessor = 'gridTargeter'; // property name as it sits on an entity\nmh.GridTargeter.className = 'GRID_TARGETER'; // name of component on the ComponenDef object\nmh.GridTargeter.priority = 10; // general position in the engine's component array; highest updated first\n\nmh.GridTargeter.prototype = {\n\tconstructor: mh.GridTargeter,\n\n\tactivate: function() {\n\t\tthis.active = true;\n\t\tthis.target = null;\n\t\tthis.collisionId = this.entity.collisionId;\n\t\tthis._findTarget();\n\t},\n\n\tdisable: function() {\n\t\tthis.active = false;\n\t\tthis.target = null;\n\t},\n\n\tupdate: function() {\n\t\tif (performance.now() - this._timer >= this.searchInterval) {\n\t\t\tthis._findTarget();\n\t\t\tthis._timer = performance.now();\n\t\t}\n\t},\n\n\tdispose: function() {\n\t\t// remove signal callbacks\n\n\t\t// null references\n\t\tthis.entity = null;\n\t\tthis.position = null;\n\t},\n\n\t/*-------------------------------------------------------------------------------\n\t\t\t\t\t\t\t\t\tPRIVATE: EVENTS\n\t-------------------------------------------------------------------------------*/\n\n\t_findTarget: function() {\n\t\tvar node, obj;\n\t\tthis._nearby.clear();\n\t\tthis._grid.getNearby(this.position, this.scanRadius, this._nearby);\n\n\t\tnode = this._nearby.first;\n\t\twhile (node) {\n\t\t\tobj = node.obj;\n\t\t\tif (obj && obj.entity.id !== this.entity.id) {\n\t\t\t\tthis.target = obj;\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tnode = node.next;\n\t\t}\n\t\tthis.target = null;\n\t}\n};\n","mh.Health = function(entity, settings) {\n\tsettings = settings || {};\n\tmh.Base.call(this);\n\n\t// attributes\n\tthis.max = 100;\n\tthis.overage = 0;\n\tthis.alive = false;\n\tthis.active = false; // this component doesn't need to be updated\n\n\t// attribute override\n\tmh.util.overwrite(this, settings);\n\n\tthis.onDeath = new mh.Signal();\n\tthis.onDamage = new mh.Signal();\n\tthis.onHeal = new mh.Signal();\n\tthis.onFull = new mh.Signal();\n\tthis.onActivate = new mh.Signal();\n\n\t// private properties\n\tthis.entity = entity;\n\tthis._meter = 0;\n};\n\n// required statics for component system\nmh.Health.accessor = 'health'; // property name as it sits on an entity\nmh.Health.className = 'HEALTH'; // name of component on the ComponenDef object\nmh.Health.priority = 1; // general position in the engine's component array; highest updated first\n\nmh.Health.prototype = {\n\tconstructor: mh.Health,\n\n\tactivate: function() {\n\t\tthis._meter = this.max;\n\t\tthis.alive = true;\n\t\tthis.onActivate.dispatch(this._meter, this.entity);\n\t},\n\n\tchange: function(amount) {\n\t\tif (!this.alive) return 0;\n\n\t\tthis._meter += amount;\n\n\t\tif (this._meter <= 0) {\n\t\t\tthis._meter = 0;\n\t\t\tthis.alive = false;\n\n\t\t\tthis.onDeath.dispatch(amount, this.entity);\n\t\t}\n\t\telse {\n\t\t\tif (this._meter > this.max + this.overage) {\n\t\t\t\tthis._meter = this.max;\n\n\t\t\t\tthis.onFull.dispatch(amount);\n\t\t\t}\n\n\t\t\tif (amount < 0) this.onDamage.dispatch(amount);\n\t\t\telse this.onHeal.dispatch(amount);\n\t\t}\n\n\t\treturn this._meter;\n\t},\n\n\tdrain: function(amount) {\n\t\tif (!this.alive) return 0;\n\n\t\tif (this._meter > this.max) {\n\t\t\tthis._meter -= amount;\n\t\t\tif (this._meter <= this.max) {\n\t\t\t\tthis._meter = this.max;\n\n\t\t\t\tthis.onFull.dispatch(amount);\n\t\t\t}\n\t\t}\n\t\treturn this._meter;\n\t},\n\n\tdispose: function() {\n\t\t// remove signal callbacks\n\t\tthis.onDeath.dispose();\n\t\tthis.onDamage.dispose();\n\t\tthis.onHeal.dispose();\n\t\tthis.onFull.dispose();\n\n\t\t// null references\n\t\tthis.entity = null;\n\t\tthis.deathSignal = null;\n\t\tthis.onDamage = null;\n\t\tthis.onHeal = null;\n\t\tthis.onFull = null;\n\t}\n};\n","/*\n\tHandy component that dispatches a signal at a given interval, with other configuration options available.\n\t@author Corey Birnbaum http://coldconstructs.com/ @vonWolfehaus\n*/\nmh.Timer = function(entity, settings) {\n\tsettings = settings || {};\n\tmh.Base.call(this);\n\n\tthis.repeat = -1; // set to -1 to repeat forever\n\tthis.immediateDispatch = false;\n\tthis.interval = 1000; // milliseconds\n\n\tmh.util.overwrite(this, settings);\n\n\tthis.onInterval = new mh.Signal();\n\n\t// private properties\n\tthis.entity = entity;\n\tthis._timer = 0;\n\tthis._numTicks = 0;\n\tthis._currentRepeat = this.repeat;\n\n\tthis.disable();\n};\n\n// required statics for component system\nmh.Timer.accessor = 'timer'; // property name as it sits on an entity\nmh.Timer.className = 'TIMER'; // name of component on the ComponenDef object\nmh.Timer.priority = 13; // general position in the engine's component array; updated according to ascending order\n\nmh.Timer.prototype = {\n\tconstructor: mh.Timer,\n\n\tactivate: function() {\n\t\tthis._timer = performance.now();\n\t\tthis.active = true;\n\t\tthis._currentRepeat = this.repeat;\n\t\tthis._numTicks = 0;\n\t\tif (this.immediateDispatch) {\n\t\t\tthis._numTicks++;\n\t\t\tthis.onInterval.dispatch(this._numTicks);\n\t\t}\n\t},\n\n\tdisable: function() {\n\t\tthis.active = false;\n\t},\n\n\treset: function() {\n\t\tthis._timer = performance.now();\n\t\tthis._numTicks = 0;\n\t\tif (this.active && this.immediateDispatch) {\n\t\t\tthis._numTicks++;\n\t\t\tthis.onInterval.dispatch(this._numTicks);\n\t\t}\n\t},\n\n\tupdate: function() {\n\t\tif (performance.now() - this._timer >= this.interval) {\n\t\t\tthis._numTicks++;\n\t\t\tthis.onInterval.dispatch(this._numTicks);\n\n\t\t\tif (this.repeat !== -1 && this._currentRepeat-- === 0) {\n\t\t\t\tthis.disable();\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tthis._timer = performance.now();\n\t\t}\n\t},\n\n\tdispose: function() {\n\t\t// remove signal callbacks\n\t\tthis.onInterval.dispose();\n\n\t\t// null references\n\t\tthis.onInterval = null;\n\t\tthis.entity = null;\n\t}\n};\n","/*\n\tControls a group of Boids for optimal pathing.\n\thttp://www.gamasutra.com/view/feature/131721/implementing_coordinated_movement.php?print=1\n\t@author Corey Birnbaum http://coldconstructs.com/ @vonWolfehaus\n*/\nmh.BoidGroup = function(settings) {\n\tsettings = settings || {};\n\tmh.Base.call(this);\n\n\t// these are values that achieve optimal behavioral effects--use as a starting point\n\tthis.maxForce = 9999999; // this gets overwritten by the slowest member of the group\n\t// arrive\n\tthis.slowingRadius = 70;\n\tthis.pathArriveRadius = 60;\n\tthis.groupID = this.uuid; // never modify the uuid, so copy it to something we can mess with\n\tthis.repeat = false;\n\t// wander?\n\t// this.angleJitter = 0.9;\n\t// this.targetDistance = 20;\n\t// this.targetRadius = 20;\n\n\t// attribute override\n\tmh.util.overwrite(this, settings);\n\n\tthis.members = new mh.LinkedList();\n\tthis.steeringForce = new mh.Vec2();\n\n\t// private properties\n\t// this._wanderAngle = 0;\n\tthis._currentPathNode = 0;\n\tthis._pathDir = 1;\n\tthis._arrived = true;\n\tthis._nodePool = new mh.DualPool(mh.Vec2, null, 5);\n\n\t// prerequisite components\n\tthis.position = new mh.Vec2(); // average position of all members\n\tthis.velocity = new mh.Vec2(); // magnitude and orientation of the group\n\tthis.path = [];\n\n\tmh.kai.addComponent(this, mh.Component.STACK_FSM);\n\n\tthis.onComplete = new mh.Signal();\n\n\tthis.stackFSM.stateChanged.add(this._stateChanged, this);\n};\n\n// constants for passing into boid Signals\nmh.BoidGroup.DETACHED = 0;\nmh.BoidGroup.ATTACHED = 1;\n\nmh.BoidGroup.prototype = {\n\tconstructor: mh.BoidGroup,\n\n\t/*___________________________________________________________________________\n\t\t\tPUBLIC\n\t*/\n\n\taddBoid: function(boid) {\n\t\tboid.groupID = this.groupID;\n\t\tthis.members.add(boid);\n\t\tif (boid.maxForce < this.maxForce) {\n\t\t\tthis.maxForce = boid.maxForce;\n\t\t}\n\t},\n\n\taddEntity: function(entity) {\n\t\tif (!entity.boid) {\n\t\t\tconsole.warn('[BoidGroup.addEntity] All entities added to BoidGroup must have boid components');\n\t\t\treturn;\n\t\t}\n\t\tthis.addBoid(entity.boid);\n\t},\n\n\taddEntities: function(list) {\n\t\tvar entity, node = list.first;\n\t\twhile (node) {\n\t\t\tentity = node.obj;\n\t\t\tif (!entity.boid) {\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tthis.addBoid(entity.boid);\n\t\t\tnode = node.next;\n\t\t}\n\t},\n\n\tremoveBoid: function(boid) {\n\t\tvar node;\n\t\tthis.members.remove(boid);\n\t\tthis.maxForce = 9999999;\n\n\t\tif (this.members.length === 0) {\n\t\t\tthis.disable();\n\t\t\tthis.onComplete.dispatch(this);\n\t\t\treturn;\n\t\t}\n\n\t\tnode = this.members.first;\n\t\twhile (node) {\n\t\t\tif (boid.maxForce < this.maxForce) {\n\t\t\t\tthis.maxForce = boid.maxForce;\n\t\t\t}\n\t\t\tnode = node.next;\n\t\t}\n\t},\n\n\tremoveEntity: function(entity) {\n\t\tthis.removeBoid(entity.boid);\n\t},\n\n\tremoveAll: function() {\n\t\tthis.members.clear();\n\t\tthis.disable(); // no group to move, so we're done\n\t\tthis.onComplete.dispatch(this);\n\t},\n\n\taddWaypoint: function(x, y) {\n\t\tvar v = this._nodePool.get();\n\t\tv.x = x;\n\t\tv.y = y;\n\t\tthis.path.push(v);\n\n\t\tthis._arrived = false;\n\t\tthis.stackFSM.pushState(this.followPath, this);\n\t},\n\n\t// we usually get a full path from some pathfinding algorithm, so this will non-destructively\n\t// set the new path and kick us off properly\n\tsetPath: function(newPath) {\n\t\tvar i, v;\n\t\t// just in case our path was switched in medias res\n\t\tthis._nodePool.freeAll();\n\t\tthis.path.length = 0;\n\n\t\tfor (i = 0; i < newPath.length; i++) {\n\t\t\tv = newPath[i];\n\t\t\tthis.addWaypoint(v.x, v.y);\n\t\t}\n\n\t\tthis.stackFSM.pushState(this.followPath, this);\n\t},\n\n\t/*sendCommand: function(newState) {\n\t\tvar entity, node = this.members.first;\n\t\twhile (node) {\n\t\t\tentity = node.obj.entity;\n\t\t\tif (entity.stackFSM) {\n\t\t\t\tentity.stackFSM.stateChanged.dispatch(newState);\n\t\t\t}\n\t\t\tnode = node.next;\n\t\t}\n\t},*/\n\n\tactivate: function(members) {\n\t\tvar a, node;\n\t\tif (this.active) return;\n\n\t\tthis.active = true;\n\t\tthis.stackFSM.activate();\n\n\t\tif (members) {\n\t\t\tthis.members.clear();\n\t\t\tthis.addEntities(members);\n\t\t}\n\n\t\tnode = this.members.first;\n\t\twhile (node) {\n\t\t\ta = node.obj;\n\t\t\tthis.position.add(a.position);\n\t\t\tnode = node.next;\n\t\t}\n\t\tthis.position.divideScalar(this.members.length);\n\t},\n\n\tdisable: function() {\n\t\tthis.active = false;\n\t\tthis.reset();\n\t\tthis.stackFSM.disable();\n\t},\n\n\treset: function() {\n\t\t// note: entities must be managed independently! this only handles the path of the group\n\t\tthis.velocity.x = 0;\n\t\tthis.velocity.y = 0;\n\t\tthis._nodePool.freeAll();\n\t\tthis.path.length = 0;\n\t\tthis._currentPathNode = 0;\n\t\tthis._pathDir = 1;\n\t\tthis._arrived = true;\n\t},\n\n\tdispose: function() {\n\t\tmh.kai.removeComponent(this, mh.Component.STACK_FSM);\n\t\tthis.members.dispose();\n\t\tthis.members = null;\n\t\tthis._nodePool.dispose();\n\t\tthis._nodePool = null;\n\n\t\tthis.steeringForce = null;\n\t\tthis.position = null;\n\t\tthis.velocity = null;\n\t\tthis.path = null;\n\t},\n\n\t/*___________________________________________________________________________\n\t\t\tBEHAVIORS: called every tick by StackFSM\n\t*/\n\n\tfollowPath: function followPath() {\n\t\tvar a, node = this.members.first;\n\n\t\tmh.Steering.followPath(this, this.path, this.repeat);\n\n\t\t// update group position and apply new force to each member\n\t\tthis.position.x = 0;\n\t\tthis.position.y = 0;\n\n\t\twhile (node) {\n\t\t\ta = node.obj;\n\t\t\tif (a.groupID !== this.groupID) {\n\t\t\t\t// the entity must have been taken away from us by something, like a short attention span\n\t\t\t\tthis.removeBoid(a);\n\t\t\t\tnode = node.next;\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tmh.Steering.flock(a, this.members);\n\n\t\t\tthis.position.add(a.position);\n\t\t\ta.velocity.add(this.steeringForce);\n\t\t\tnode = node.next;\n\t\t}\n\t\tthis.position.divideScalar(this.members.length);\n\n\t\tthis.steeringForce.x = 0;\n\t\tthis.steeringForce.y = 0;\n\n\t\tif (this._arrived) {\n\t\t\tthis.stackFSM.popState();\n\t\t}\n\t},\n\n\t/*___________________________________________________________________________\n\t\t\tPRIVATE: EVENTS\n\t*/\n\n\t_stateChanged: function(oldState, newState) {\n\t\tvar target, a, node = this.members.first;\n\n\t\tif (oldState === newState) {\n\t\t\treturn;\n\t\t}\n\n\t\tswitch (newState) {\n\t\t\tcase 'followPath':\n\t\t\t\tthis.activate();\n\t\t\t\tthis._currentPathNode = 0;\n\t\t\t\tthis._pathDir = 1;\n\t\t\t\tthis._arrived = false;\n\t\t\t\ttarget = this.path[this._currentPathNode];\n\t\t\t\tthis.velocity.copy(target);\n\t\t\t\tthis.velocity.normalize().multiplyScalar(this.maxForce);\n\n\t\t\t\t// notify members\n\t\t\t\twhile (node) {\n\t\t\t\t\ta = node.obj;\n\t\t\t\t\ta.groupControl.dispatch(mh.BoidGroup.ATTACHED);\n\t\t\t\t\tnode = node.next;\n\t\t\t\t}\n\t\t\t\tbreak;\n\n\t\t\tdefault:\n\t\t\t\t// a state we don't have (ie idle), so we're done\n\t\t\t\tthis.disable();\n\n\t\t\t\t// notify members\n\t\t\t\twhile (node) {\n\t\t\t\t\ta = node.obj;\n\t\t\t\t\ta.groupControl.dispatch(mh.BoidGroup.DETACHED);\n\t\t\t\t\tnode = node.next;\n\t\t\t\t}\n\t\t\t\t// any anyone else\n\t\t\t\tthis.onComplete.dispatch(this);\n\t\t\t\tbreak;\n\t\t}\n\t}\n};\n","/*\n\tControls the acceleration of an entity and enables steering behaviors to be used.\n\t@author Corey Birnbaum http://coldconstructs.com/ @vonWolfehaus\n*/\nmh.Boid = function(entity, settings) {\n\tsettings = settings || {};\n\tmh.Base.call(this);\n\n\t// these are values that achieve optimal behavioral effects--use as a starting point\n\tthis.maxForce = 10;\n\t// arrive\n\tthis.slowingRadius = 50;\n\tthis.pathArriveRadius = 50;\n\t// follow leader\n\t// this.leaderBehindDist = 100;\n\t// this.leaderSightRadius = 300;\n\t// flocking--these defaults are for entities with a 50 pixel radius\n\tthis.groupID = 0;\n\tthis.flockRadius = 160; // distance where flocking (alignment) starts to happen\n\tthis.maxCohesion = 140; // radius within which cohesion rule is in effect\n\tthis.minSeparation = 70; // distance at which separation rule goes into effect\n\t// wander\n\tthis.angleJitter = 0.9;\n\tthis.targetDistance = 20;\n\tthis.targetRadius = 20;\n\n\t// attribute override\n\tmh.util.overwrite(this, settings);\n\n\tthis.entity = entity;\n\tthis.steeringForce = new mh.Vec2(mh.util.random(this.maxForce), mh.util.random(this.maxForce));\n\n\tthis.maxSpeed = this.entity.maxSpeed || this.maxForce;\n\tif (entity.body) {\n\t\tthis.maxSpeed = entity.body.maxSpeed;\n\t}\n\n\t// private properties\n\tthis._wanderAngle = 0;\n\t// this._prevAngle = 0;\n\tthis._currentPathNode = 0;\n\tthis._pathDir = 1;\n\tthis._arrived = false;\n\n\t// prerequisite components\n\tthis.position = mh.kai.expect(entity, 'position', mh.Vec2);\n\tthis.rotation = mh.kai.expect(entity, 'rotation', mh.Vec2);\n\tthis.velocity = mh.kai.expect(entity, 'velocity', mh.Vec2);\n\n\tthis.groupControl = new mh.Signal();\n};\n\n// required statics for component system\nmh.Boid.accessor = 'boid'; // property name as it sits on an entity\nmh.Boid.className = 'BOID'; // name of component on the component definition object\nmh.Boid.priority = 95; // just before the physics components (at 100) but otherwise dead last\nmh.Boid.post = false; // whether or not this component will have a postUpdate() called on it\n\nmh.Boid.prototype = {\n\tconstructor: mh.Boid,\n\n\tactivate: function() {\n\t\tthis.active = true;\n\t\tthis._currentPathNode = 0;\n\t\tthis._pathDir = 1;\n\t\tthis._arrived = false;\n\t},\n\n\tdisable: function() {\n\t\tthis.active = false;\n\t},\n\n\tupdate: function() {\n\t\t// steeringForce has been modified by Steering so cap it and apply\n\t\tthis.steeringForce.truncate(this.maxForce);\n\n\t\t// let physical mass affect movement\n\t\tthis.steeringForce.multiplyScalar(this.entity.body.invmass);\n\t\t// DebugDraw.vector(Kai.debugCtx, this.steeringForce, this.position);\n\n\t\tthis.velocity.x += this.steeringForce.x;\n\t\tthis.velocity.y += this.steeringForce.y;\n\n\t\t// adjust rotation to match the velocity vector--the view component will take care of the rest\n\t\tthis.rotation.x = this.velocity.x;\n\t\tthis.rotation.y = this.velocity.y;\n\n\t\t// reset for next time, so steering forces get applied in the updates of other components\n\t\tthis.steeringForce.x = 0;\n\t\tthis.steeringForce.y = 0;\n\t},\n\n\tdispose: function() {\n\t\tthis.groupControl.dispose();\n\t\tthis.groupControl = null;\n\t\tthis.entity = null;\n\t\tthis.steeringForce = null;\n\t\tthis.position = null;\n\t\tthis.rotation = null;\n\t\tthis.velocity = null;\n\t}\n};\n","/*\n\tStack-based Finite State Machine.\n\t@author Corey Birnbaum http://coldconstructs.com/ @vonWolfehaus\n*/\nvar StackFSM = function(entity) {\n\tmh.Base.call(this);\n\n\t// public properties\n\tthis.state = null;\n\tthis.stack = [];\n\tthis.entity = entity;\n\n\tthis.stateChanged = new mh.Signal();\n\n\t// private\n\tthis._activeContext = null;\n\tthis._activeFunction = null;\n\tthis._prevFunction = null;\n};\n\n// required statics for component system\nStackFSM.accessor = 'stackFSM'; // property name as it sits on an entity\nStackFSM.className = 'STACK_FSM'; // name of component on the component definition object\nStackFSM.priority = 5; // general position in the engine's component array; the lower, the earlier it's updated\nStackFSM.post = false; // whether or not this component will have a postUpdate() called on it\n\nStackFSM.prototype = {\n\tconstructor: StackFSM,\n\n\tactivate: function() {\n\t\tthis.active = true;\n\t},\n\n\tdisable: function() {\n\t\tthis.active = false;\n\t\tthis.reset();\n\t},\n\n\treset: function() {\n\t\tthis.stack.length = 0;\n\t\tthis._prevFunction = null;\n\t\tthis._activeFunction = null;\n\t},\n\n\tpushState: function(state, ctx) {\n\t\tif (state !== this._activeFunction) {\n\t\t\tthis.stack.push(state);\n\t\t\tthis._activeContext = ctx;\n\n\t\t\tif (!this.active) {\n\t\t\t\tthis.activate();\n\t\t\t}\n\t\t}\n\t},\n\n\tpopState: function() {\n\t\tthis.stack.pop();\n\t\tthis._activeFunction = this.stack.length ? this.stack[this.stack.length - 1] : null;\n\t\tif (!this._activeFunction) {\n\t\t\tthis.stateChanged.dispatch(this.state, 'null');\n\t\t\tthis._prevFunction = null;\n\t\t\tthis.disable();\n\t\t}\n\t},\n\n\tupdate: function() {\n\t\tthis._activeFunction = this.stack.length ? this.stack[this.stack.length - 1] : null;\n\t\tif (this._activeFunction) {\n\t\t\t// monitor changes so entity can react to unique situations\n\t\t\tif (this._activeFunction !== this._prevFunction) {\n\t\t\t\tthis.state = this._activeFunction.name;\n\t\t\t\tthis.stateChanged.dispatch(this._prevFunction ? this._prevFunction.name : 'null', this.state);\n\t\t\t\tthis._prevFunction = this._activeFunction;\n\t\t\t}\n\n\t\t\tthis._activeFunction.call(this._activeContext);\n\t\t}\n\t},\n\n\tdispose: function() {\n\t\tthis.entity = null;\n\t\tthis._activeFunction = null;\n\t\tthis._prevFunction = null;\n\t\tthis.stack = null;\n\t\tthis.stateChanged.dispose();\n\t\tthis.stateChanged = null;\n\t}\n};\n","/*\n\tAbstracts pixi sprite creation so it's compatible with our entity-component system.\n\t@author Corey Birnbaum http://coldconstructs.com/ @vonWolfehaus\n*/\nmh.PIXISprite = function(entity, settings) {\n\tsettings = settings || {};\n\tmh.Base.call(this);\n\n\tthis.textureUrl = 'img/square-outline-textured.png';\n\tthis.container = mh.kai.view;\n\n\tmh.util.overwrite(this, settings);\n\n\t// private properties\n\tthis.entity = entity;\n\tthis._display = null;\n\n\t// prerequisite components\n\tthis.position = entity.position;\n};\n\n// required statics for component system\nmh.PIXISprite.accessor = 'view'; // property name as it sits on an entity\nmh.PIXISprite.className = 'VIEW_SPRITE'; // name of component on the ComponenDef object\nmh.PIXISprite.priority = 10; // general position in the engine's component array; highest updated first\n\nmh.PIXISprite.prototype = {\n\tconstructor: mh.PIXISprite,\n\n\tactivate: function() {\n\t\tthis.active = true;\n\t},\n\n\tdisable: function() {\n\t\tthis.active = false;\n\t},\n\n\tupdate: function() {\n\n\t},\n\n\tdispose: function() {\n\t\tthis.disable();\n\n\t\t// null references\n\t\tthis.entity = null;\n\t\tthis.position = null;\n\t}\n};\n","/*\n\tAbstracts threejs cube creation so it's compatible with our entity-component system.\n\t@author Corey Birnbaum http://coldconstructs.com/ @vonWolfehaus\n*/\nmh.THREECube = function(entity, settings) {\n\tsettings = settings || {};\n\tmh.Base.call(this);\n\n\t// attributes\n\tthis.textureUrl = 'img/square-outline-textured.png';\n\tthis.container = mh.kai.view;\n\tthis.size = 50;\n\tthis.dynamic = false;\n\tthis.color = 0xfeb74c;\n\n\tmh.util.overwrite(this, settings);\n\n\t// private properties\n\tthis.entity = entity;\n\tthis._display = null;\n\n\t// NEVER do this in production! geo and materials should be cached!\n\t// But I'm on vacation and this is prototype code so, meh\n\tvar cubeGeo = new THREE.CubeGeometry(this.size, this.size, this.size);\n\tvar cubeMaterial = new THREE.MeshLambertMaterial({\n\t\tcolor: this.color,\n\t\tambient: this.color,\n\t\tshading: THREE.FlatShading,\n\t\tmap: this.dynamic ? null : THREE.ImageUtils.loadTexture(this.textureUrl)\n\t});\n\n\tthis._display = new THREE.Mesh(cubeGeo, cubeMaterial);\n\n\tif (!this.dynamic) {\n\t\tthis._display.matrixAutoUpdate = false;\n\t\tthis._display.position.copy(entity.position);\n\t\tthis._display.updateMatrix();\n\t}\n\n\t// prerequisite components\n\tthis.position = entity.position;\n};\n\n// required statics for component system\nmh.THREECube.accessor = 'view'; // property name as it sits on an entity\nmh.THREECube.className = 'VIEW_CUBE'; // name of component on the mh.Component object\nmh.THREECube.priority = 10; // general position in the engine's component array; highest updated first\n\nmh.THREECube.prototype = {\n\tconstructor: mh.THREECube,\n\n\tactivate: function() {\n\t\tthis.active = true;\n\t\tthis.container.add(this._display);\n\t},\n\n\tdisable: function() {\n\t\tthis.active = false;\n\t\tthis.container.remove(this._display);\n\t},\n\n\tupdate: function() {\n\t\tthis._display.position.x = this.position.x;\n\t\tthis._display.position.y = this.position.y;\n\t\tthis._display.position.z = this.position.z;\n\t},\n\n\tdispose: function() {\n\t\tthis.disable();\n\n\t\t// null references\n\t\tthis.entity = null;\n\t\tthis.position = null;\n\t\tthis._display = null; // if you don't dispose() THREE Geometry, you'll get memory leaks FYI\n\t}\n};\n","\n/*\n\tHandles lifecycle of gamepads.\n\t@author Corey Birnbaum http://coldconstructs.com/ @vonWolfehaus\n*/\nmh.GamepadController = function() {\n\tthis.controllers = [];\n\tthis.onConnect = new mh.Signal();\n\tthis.onDisconnect = new mh.Signal();\n\tthis.activeControllers = 0;\n\n\t// private\n\tthis._controllerStatus = [];\n\n\tfor (var i = 0; i < 4; i++) {\n\t\tthis.controllers[i] = new mh.XboxGamepad(i);\n\t\tthis._controllerStatus[i] = false;\n\t}\n\n\twindow.addEventListener('gamepadconnected', this._onConnect.bind(this), false);\n\twindow.addEventListener('gamepaddisconnected', this._onDisconnect.bind(this), false);\n};\n\nmh.GamepadController.prototype = {\n\tconstructor: mh.GamepadController,\n\n\tupdate: function() {\n\t\tvar i, ctrl;\n\t\tif (navigator.webkitGetGamepads) {\n\t\t\tthis._scan(); // very poorly designed, Mozilla... use events, not polling for this!\n\t\t}\n\t\tfor (i = 0; i < 4; i++) {\n\t\t\tctrl = this.controllers[i];\n\t\t\tif (ctrl.active) {\n\t\t\t\tctrl.update();\n\t\t\t}\n\t\t}\n\t},\n\n\tdispose: function() {\n\t\t// null references\n\t\tthis.controllers = null;\n\t\tthis.onConnect.dispose();\n\t\tthis.onDisconnect.dispose();\n\t\tthis.onConnect = null;\n\t\tthis.onDisconnect = null;\n\t\tthis._controllerStatus = null;\n\t},\n\n\t_addPad: function(gamepad) {\n\t\tvar ctrl = this.controllers[gamepad.index];\n\t\tctrl.register(gamepad);\n\t\tctrl.activate();\n\n\t\tthis.onConnect.dispatch(ctrl);\n\t\tthis.activeControllers++;\n\t\t// console.log('addPad');\n\t},\n\n\t_removePad: function(gamepad) {\n\t\tvar ctrl = gamepad.index ? this.controllers[gamepad.index] : this.controllers[gamepad];\n\t\tctrl.unregister();\n\n\t\tthis.onDisconnect.dispatch(ctrl);\n\t\tthis.activeControllers--;\n\t\t// console.log('removePad');\n\t},\n\n\t_onConnect: function(evt) {\n\t\tthis._addPad(evt.gamepad);\n\t},\n\n\t_onDisconnect: function(evt) {\n\t\tthis._removePad(evt.gamepad);\n\t},\n\n\t_scan: function() {\n\t\tvar i, gamepads = navigator.webkitGetGamepads();\n\t\tfor (i = 0; i < gamepads.length; i++) {\n\t\t\tif (gamepads[i]) {\n\t\t\t\tif (this._controllerStatus[i]) {\n\t\t\t\t\t// this is fucking pathetic, we should be getting live references!\n\t\t\t\t\tthis.controllers[i].setPad(gamepads[i]);\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\tthis._addPad(gamepads[i]);\n\t\t\t\t\tthis._controllerStatus[i] = true;\n\t\t\t\t}\n\n\t\t\t}\n\t\t\telse if (!gamepads[i] && this._controllerStatus[i]) {\n\t\t\t\tthis._removePad(i);\n\t\t\t\tthis._controllerStatus[i] = false;\n\t\t\t}\n\t\t}\n\t}\n};\n","\n/*\n\tAbstracts keyboard input. This should be instantiated once and referenced in a globally-accessible object.\n\tNot a component.\n\t@author Corey Birnbaum http://coldconstructs.com/ @vonWolfehaus\n*/\nmh.KeyboardController = function() {\n\tthis.key = -1;\n\n\tthis.onDown = new mh.Signal();\n\tthis.onUp = new mh.Signal();\n\n\tthis.shift = false;\n\tthis.ctrl = false;\n\n\tthis._keys = {};\n\tthis._prev = null;\n\n\tdocument.addEventListener('keydown', this._processDown.bind(this), false);\n\tdocument.addEventListener('keyup', this._processUp.bind(this), false);\n};\n\nmh.KeyboardController.prototype = {\n\tconstructor: mh.KeyboardController,\n\n\t_processDown: function(evt) {\n\t\tvar key = this._keys[evt.keyCode];\n\n\t\tif (mh.kai.inputBlocked || this.key === this._prev) {\n\t\t\tevt.preventDefault();\n\t\t\treturn;\n\t\t}\n\n\t\tthis.shift = !!evt.shiftKey;\n\t\tthis.ctrl = !!evt.ctrlKey;\n\t\tthis.key = evt.keyCode;\n\n\t\tif (key && key.isDown) {\n\t\t\t//  Key already down and still down, so update\n\t\t\tthis._keys[evt.keyCode].duration = performance.now() - key.timeDown;\n\n\t\t}\n\t\telse {\n\t\t\tif (!key) {\n\t\t\t\t//  Not used this key before, so register it\n\t\t\t\tthis._keys[evt.keyCode] = {\n\t\t\t\t\tisDown: true,\n\t\t\t\t\ttimeDown: performance.now(),\n\t\t\t\t\ttimeUp: 0,\n\t\t\t\t\tduration: 0\n\t\t\t\t};\n\t\t\t}\n\t\t\telse {\n\t\t\t\t//  Key used before but freshly down\n\t\t\t\tthis._keys[evt.keyCode].isDown = true;\n\t\t\t\tthis._keys[evt.keyCode].timeDown = performance.now();\n\t\t\t\tthis._keys[evt.keyCode].duration = 0;\n\t\t\t}\n\t\t}\n\n\t\tthis.onDown.dispatch(this.key);\n\t\tthis._prev = this.key;\n\t},\n\n\t_processUp: function(evt) {\n\t\tif (mh.kai.inputBlocked) {\n\t\t\tevt.preventDefault();\n\t\t\treturn;\n\t\t}\n\n\t\tthis.key = -1;\n\t\tthis.shift = false;\n\t\tthis.ctrl = false;\n\n\t\tif (this._keys[evt.keyCode]) {\n\t\t\tthis._keys[evt.keyCode].isDown = false;\n\t\t\tthis._keys[evt.keyCode].timeUp = performance.now();\n\t\t}\n\t\telse {\n\t\t\t//  Not used this key before, so register it\n\t\t\tthis._keys[evt.keyCode] = {\n\t\t\t\tisDown: false,\n\t\t\t\ttimeDown: performance.now(),\n\t\t\t\ttimeUp: performance.now(),\n\t\t\t\tduration: 0\n\t\t\t};\n\t\t}\n\n\t\tthis.onUp.dispatch(evt.keyCode, this._keys[evt.keyCode].timeUp - this._keys[evt.keyCode].timeDown);\n\t},\n\n\t/**\n\t * Reset the 'isDown' state of all keys.\n\t * @method Phaser.Keyboard#activate\n\t */\n\tactivate: function() {\n\t\tfor (var key in this._keys) {\n\t\t\tthis._keys[key].isDown = false;\n\t\t}\n\t},\n\n\t/**\n\t * Returns the 'just pressed' state of the key. Just pressed is considered true if the key was pressed down within the duration given (default 250ms)\n\t * @param {number} keycode - The keycode of the key to remove, i.e. mh.kai.keys.UP or mh.kai.keys.SPACE_BAR\n\t * @param {number} [duration=100] - The duration below which the key is considered as being just pressed.\n\t * @return {boolean} True if the key is just pressed otherwise false.\n\t */\n\tjustPressed: function(keycode, duration) {\n\t\tif (typeof duration === 'undefined') {\n\t\t\tduration = 100;\n\t\t}\n\n\t\tif (this._keys[keycode] && this._keys[keycode].isDown && this._keys[keycode].duration < duration) {\n\t\t\treturn true;\n\t\t}\n\n\t\treturn false;\n\n\t},\n\n\t/**\n\t * Returns the 'just released' state of the Key. Just released is considered as being true if the key was released within the duration given (default 250ms)\n\t * @method Phaser.Keyboard#justPressed\n\t * @param {number} keycode - The keycode of the key to remove, i.e. mh.kai.keys.UP or mh.kai.keys.SPACE_BAR\n\t * @param {number} [duration=100] - The duration below which the key is considered as being just released.\n\t * @return {boolean} True if the key is just released otherwise false.\n\t */\n\tjustReleased: function(keycode, duration) {\n\t\tif (typeof duration === 'undefined') {\n\t\t\tduration = 100;\n\t\t}\n\n\t\tif (this._keys[keycode] && this._keys[keycode].isDown === false && (performance.now() - this._keys[keycode].timeUp < duration)) {\n\t\t\treturn true;\n\t\t}\n\n\t\treturn false;\n\n\t},\n\n\t/**\n\t * Returns true of the key is currently pressed down. Note that it can only detect key presses on the web browser.\n\t * @param {number} keycode - The keycode of the key to remove, i.e. mh.kai.keys.UP or mh.kai.keys.SPACE_BAR\n\t * @return {boolean} True if the key is currently down.\n\t */\n\tisDown: function(keycode) {\n\t\tif (this._keys[keycode]) {\n\t\t\treturn this._keys[keycode].isDown;\n\t\t}\n\t\treturn false;\n\t},\n\n\tA: 'A'.charCodeAt(0),\n\tB: 'B'.charCodeAt(0),\n\tC: 'C'.charCodeAt(0),\n\tD: 'D'.charCodeAt(0),\n\tE: 'E'.charCodeAt(0),\n\tF: 'F'.charCodeAt(0),\n\tG: 'G'.charCodeAt(0),\n\tH: 'H'.charCodeAt(0),\n\tI: 'I'.charCodeAt(0),\n\tJ: 'J'.charCodeAt(0),\n\tK: 'K'.charCodeAt(0),\n\tL: 'L'.charCodeAt(0),\n\tM: 'M'.charCodeAt(0),\n\tN: 'N'.charCodeAt(0),\n\tO: 'O'.charCodeAt(0),\n\tP: 'P'.charCodeAt(0),\n\tQ: 'Q'.charCodeAt(0),\n\tR: 'R'.charCodeAt(0),\n\tS: 'S'.charCodeAt(0),\n\tT: 'T'.charCodeAt(0),\n\tU: 'U'.charCodeAt(0),\n\tV: 'V'.charCodeAt(0),\n\tW: 'W'.charCodeAt(0),\n\tX: 'X'.charCodeAt(0),\n\tY: 'Y'.charCodeAt(0),\n\tZ: 'Z'.charCodeAt(0),\n\tZERO: '0'.charCodeAt(0),\n\tONE: '1'.charCodeAt(0),\n\tTWO: '2'.charCodeAt(0),\n\tTHREE: '3'.charCodeAt(0),\n\tFOUR: '4'.charCodeAt(0),\n\tFIVE: '5'.charCodeAt(0),\n\tSIX: '6'.charCodeAt(0),\n\tSEVEN: '7'.charCodeAt(0),\n\tEIGHT: '8'.charCodeAt(0),\n\tNINE: '9'.charCodeAt(0),\n\tNUMPAD_0: 96,\n\tNUMPAD_1: 97,\n\tNUMPAD_2: 98,\n\tNUMPAD_3: 99,\n\tNUMPAD_4: 100,\n\tNUMPAD_5: 101,\n\tNUMPAD_6: 102,\n\tNUMPAD_7: 103,\n\tNUMPAD_8: 104,\n\tNUMPAD_9: 105,\n\tNUMPAD_MULTIPLY: 106,\n\tNUMPAD_ADD: 107,\n\tNUMPAD_ENTER: 108,\n\tNUMPAD_SUBTRACT: 109,\n\tNUMPAD_DECIMAL: 110,\n\tNUMPAD_DIVIDE: 111,\n\tF1: 112,\n\tF2: 113,\n\tF3: 114,\n\tF4: 115,\n\tF5: 116,\n\tF6: 117,\n\tF7: 118,\n\tF8: 119,\n\tF9: 120,\n\tF10: 121,\n\tF11: 122,\n\tF12: 123,\n\tF13: 124,\n\tF14: 125,\n\tF15: 126,\n\tCOLON: 186,\n\tEQUALS: 187,\n\tUNDERSCORE: 189,\n\tQUESTION_MARK: 191,\n\tTILDE: 192,\n\tOPEN_BRACKET: 219,\n\tBACKWARD_SLASH: 220,\n\tCLOSED_BRACKET: 221,\n\tQUOTES: 222,\n\tBACKSPACE: 8,\n\tTAB: 9,\n\tCLEAR: 12,\n\tENTER: 13,\n\tSHIFT: 16,\n\tCONTROL: 17,\n\tALT: 18,\n\tCAPS_LOCK: 20,\n\tESC: 27,\n\tSPACEBAR: 32,\n\tPAGE_UP: 33,\n\tPAGE_DOWN: 34,\n\tEND: 35,\n\tHOME: 36,\n\tLEFT: 37,\n\tUP: 38,\n\tRIGHT: 39,\n\tDOWN: 40,\n\tINSERT: 45,\n\tDELETE: 46,\n\tHELP: 47,\n\tNUM_LOCK: 144\n};\n","/*\n\tBasic mouse tracker that exposes screen position, modifier keys, and events as Signals.\n\tNot a component.\n\t@author Corey Birnbaum http://coldconstructs.com/ @vonWolfehaus\n*/\nmh.MouseController = function() {\n\tthis.position = new mh.Vec2();\n\n\tthis.onDown = new mh.Signal();\n\tthis.onUp = new mh.Signal();\n\n\tthis.down = false;\n\tthis.shift = false;\n\tthis.ctrl = false;\n\n\tdocument.addEventListener('mousedown', this.onMouseDown, false);\n\tdocument.addEventListener('mouseup', this.onMouseUp, false);\n\tdocument.addEventListener('mouseout', this.onMouseUp, false);\n\tdocument.addEventListener('mousemove', this.onMouseMove, false);\n\tdocument.addEventListener('contextmenu', this.onMouseContext, false);\n};\n\nmh.MouseController.prototype = {\n\tconstructor: mh.MouseController,\n\n\tonMouseDown: function(evt) {\n\t\tif (mh.kai.inputBlocked) {\n\t\t\tevt.preventDefault();\n\t\t\treturn;\n\t\t}\n\n\t\tthis.position.x = evt.pageX;\n\t\tthis.position.y = evt.pageY;\n\t\tthis.down = true;\n\n\t\tthis.shift = !!evt.shiftKey;\n\t\tthis.ctrl = !!evt.ctrlKey;\n\n\t\tthis.onDown.dispatch(this.position);\n\t},\n\n\tonMouseUp: function(evt) {\n\t\tif (!this.down || mh.kai.inputBlocked) {\n\t\t\tevt.preventDefault();\n\t\t\treturn;\n\t\t}\n\n\t\tthis.position.x = evt.pageX;\n\t\tthis.position.y = evt.pageY;\n\t\tthis.down = false;\n\n\t\tthis.shift = !!evt.shiftKey;\n\t\tthis.ctrl = !!evt.ctrlKey;\n\n\t\tthis.onUp.dispatch(this.position);\n\t},\n\n\tonMouseMove: function(evt) {\n\t\tevt.preventDefault();\n\n\t\tthis.position.x = evt.pageX;\n\t\tthis.position.y = evt.pageY;\n\n\t\tthis.shift = !!evt.shiftKey;\n\t\tthis.ctrl = !!evt.ctrlKey;\n\t},\n\n\tonMouseContext: function(evt) {\n\t\tevt.preventDefault();\n\t\treturn false;\n\t}\n};\n","/*\n\tConverts a gamepad's analog sticks into acceleration (left) and rotation (right) vectors\n\tfor Geometry Wars style controls.\n\t@author Corey Birnbaum http://coldconstructs.com/ @vonWolfehaus\n*/\nmh.TwinStickMovement = function(entity, settings) {\n\tsettings = settings || {};\n\tmh.Base.call(this);\n\n\t// attributes\n\tthis.speed = 1;\n\tthis.pad = null;\n\n\t// attribute override\n\tmh.util.overwrite(this, settings);\n\n\t// private properties\n\tthis.entity = entity;\n\n\t// prerequisite components\n\tthis.accel = entity.accel;\n\tthis.rotation = entity.rotation;\n\n\tthis.active = false;\n};\n\n// required statics for component system\nmh.TwinStickMovement.accessor = 'input'; // property name as it sits on an entity\nmh.TwinStickMovement.className = 'INPUT_TWINSTICK'; // name of component on the ComponenDef object\nmh.TwinStickMovement.priority = 20; // general position in the engine's component array; highest updated first\n\nmh.TwinStickMovement.prototype = {\n\tconstructor: mh.TwinStickMovement,\n\n\tactivate: function() {\n\t\tthis.accel.x = this.accel.y = 0;\n\t\tthis.rotation.x = this.rotation.y = 0;\n\t\tthis.active = true;\n\t},\n\n\tdisable: function() {\n\t\tthis.active = false;\n\t},\n\n\tupdate: function() {\n\t\tthis.accel.copy(this.pad.leftAxis).multiplyScalar(this.speed);\n\t\tthis.rotation.copy(this.pad.rightAxis);\n\t},\n\n\tdispose: function() {\n\t\t// null references\n\t\tthis.entity = null;\n\t\tthis.accel = null;\n\t\tthis.rotation = null;\n\t}\n};\n","/*\n\tHandles specifics of Xbox controllers, used in conjunction with GamepadController.\n\tNot a component.\n\t@author Corey Birnbaum http://coldconstructs.com/ @vonWolfehaus\n*/\nmh.XboxGamepad = function(id) {\n\tmh.Base.call(this);\n\n\t// attributes\n\tthis.id = id;\n\tthis.onDown = new mh.Signal();\n\tthis.onUp = new mh.Signal();\n\n\t// NOTE: 'up' is y-, 'right' is x+, all values normalized\n\tthis.leftAxis = new mh.Vec2();\n\tthis.rightAxis = new mh.Vec2();\n\tthis.leftTrigger = 0;\n\tthis.rightTrigger = 0;\n\n\t// xbox 360 sticks drift a CONSIDERABLE amount\n\tthis.axisTolerance = 0.2;\n\n\tthis.controller = null;\n\tthis.buttons = null;\n\n\tthis._numButtons = 0;\n\tthis._mozAxisOffset = 0;\n\tthis._prevButtons = [];\n};\n\nmh.XboxGamepad.prototype = {\n\tconstructor: mh.XboxGamepad,\n\n\tregister: function(ctrlr) {\n\t\tthis.setPad(ctrlr);\n\t\tthis._numButtons = this.buttons.length;\n\n\t\tif (navigator.webkitGetGamepads) {\n\t\t\tthis._mozAxisOffset = 0;\n\t\t}\n\t\telse {\n\t\t\tthis._mozAxisOffset = 1;\n\t\t}\n\n\t\tthis.activate();\n\t\t// console.log('[XboxGamepad.register] CONNECTED '+this.id);\n\t\t// console.log(this.buttons);\n\t},\n\n\tsetPad: function(ctrlr) {\n\t\tthis.controller = ctrlr;\n\t\tthis.buttons = ctrlr.buttons;\n\t},\n\n\tunregister: function() {\n\t\tthis.controller = null;\n\t\tthis.buttons = null;\n\t\tthis._numButtons = 0;\n\t\t// console.log('[XboxGamepad.unregister] DISCONNECTED '+this.id);\n\t},\n\n\tupdate: function() {\n\t\tvar i, btn;\n\t\tvar leftX = this.controller.axes[0];\n\t\tvar leftY = this.controller.axes[1];\n\t\tvar rightX = this.controller.axes[2+this._mozAxisOffset];\n\t\tvar rightY = this.controller.axes[3+this._mozAxisOffset];\n\n\t\tif (leftX < this.axisTolerance && leftX > -this.axisTolerance) { leftX = 0; }\n\t\tif (leftY < this.axisTolerance && leftY > -this.axisTolerance) { leftY = 0; }\n\t\tif (rightX < this.axisTolerance && rightX > -this.axisTolerance) { rightX = 0; }\n\t\tif (rightY < this.axisTolerance && rightY > -this.axisTolerance) { rightY = 0; }\n\n\t\tthis.leftAxis.x = leftX;\n\t\tthis.leftAxis.y = leftY;\n\t\tthis.rightAxis.x = rightX;\n\t\tthis.rightAxis.y = rightY;\n\n\t\tfor (i = 0; i < this._numButtons; i++) {\n\t\t\tbtn = this.buttons[i];\n\n\t\t\tif (i === 6) {\n\t\t\t\tthis.leftTrigger = btn.value || btn;\n\t\t\t}\n\t\t\telse if (i === 7) {\n\t\t\t\tthis.rightTrigger = btn.value || btn;\n\t\t\t}\n\n\t\t\tif (btn && !this._prevButtons[i]) {\n\t\t\t\tthis.onDown.dispatch(i, btn);\n\t\t\t}\n\t\t\telse if (!btn && this._prevButtons[i]) {\n\t\t\t\tthis.onUp.dispatch(i, btn);\n\t\t\t}\n\n\t\t\tthis._prevButtons[i] = btn;\n\n\t\t}\n\t},\n\n\tisDown: function(btn) {\n\t\tif (mh.kai.inputBlocked || !this.active) {\n\t\t\treturn false;\n\t\t}\n\t\treturn !!this.buttons[btn];\n\t},\n\n\tactivate: function() {\n\t\tthis.active = true;\n\t\tthis.leftAxis.x = 0;\n\t\tthis.leftAxis.y = 0;\n\t\tthis.rightAxis.x = 0;\n\t\tthis.rightAxis.y = 0;\n\t\tthis.leftTrigger = 0;\n\t\tthis.rightTrigger = 0;\n\t\tfor (var i = 0; i < this._numButtons; i++) {\n\t\t\tthis.buttons[i] = 0;\n\t\t\tthis._prevButtons[i] = 0;\n\t\t}\n\t},\n\n\tdisable: function() {\n\t\tthis.active = false;\n\t},\n\n\tdispose: function() {\n\t\t// remove signal callbacks\n\t\tthis.onDown.dispose();\n\t\tthis.onUp.dispose();\n\n\t\t// null references\n\t\tthis.onDown = null;\n\t\tthis.onUp = null;\n\t}\n};\n\nmh.XBOX = {\n\tA: 0,\n\tB: 1,\n\tX: 2,\n\tY: 3,\n\tLB: 4,\n\tRB: 5,\n\tLT: 6,\n\tRT: 7,\n\tSELECT: 8,\n\tSTART: 9,\n\tLSTICK: 10,\n\tRSTICK: 11,\n\tUP: 12,\n\tDOWN: 13,\n\tLEFT: 14,\n\tRIGHT: 15\n};\n","/*\n\tDEPRECATED in favor of von-physics\n\t@author Corey Birnbaum http://coldconstructs.com/ @vonWolfehaus\n*/\nmh.CollisionGridScanner = function(entity, settings) {\n\tsettings = settings || {};\n\tmh.Base.call(this);\n\n\t// attributes\n\tthis.scanRadius = 1;\n\n\t// attribute override\n\tmh.util.overwrite(this, settings);\n\n\tthis.onCollision = new mh.Signal();\n\n\t// mh.kai.expect(entity, 'body', mh.RadialCollider);\n\n\t// private properties\n\tthis.entity = entity;\n\tthis._body = entity.body;\n\tthis._nearby = new mh.LinkedList();\n\tthis._grid = mh.world.broadphase;\n};\n\n// required statics for component system\nmh.CollisionGridScanner.accessor = 'collisionScanner'; // property name as it sits on an entity\nmh.CollisionGridScanner.className = 'COLLISION_SCANNER_RADIAL'; // name of component on the ComponenDef object\nmh.CollisionGridScanner.priority = 5; // general position in the engine's component array; highest updated first\n\nmh.CollisionGridScanner.prototype = {\n\tconstructor: mh.CollisionGridScanner,\n\n\tactivate: function() {\n\t\tthis.active = true;\n\t},\n\n\tdisable: function() {\n\t\tthis.active = false;\n\t},\n\n\tupdate: function() {\n\t\tvar node, obj;\n\t\tthis._grid.getNeighbors(this._body, this.scanRadius, this._nearby);\n\n\t\tnode = this._nearby.first;\n\t\twhile (node) {\n\t\t\tobj = node.obj;\n\n\t\t\t// only tests! if you physics resolution, then just put it in the grid\n\t\t\tif (mh.physics.testCircleVsCircle(obj, this._body)) {\n\t\t\t\tthis.onCollision.dispatch(obj);\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tnode = node.next;\n\t\t}\n\t},\n\n\tdispose: function() {\n\t\t// remove signal callbacks\n\t\tthis.onCollision.dispose();\n\n\t\t// null references\n\t\tthis.entity = null;\n\t\tthis.position = null;\n\t\tthis.onCollision = null;\n\t}\n};\n"],"sourceRoot":"/source/"}