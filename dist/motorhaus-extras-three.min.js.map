{"version":3,"sources":["Scene.js","THREECube.js"],"names":["mh","Scene","sceneConfig","controlConfig","sceneSettings","element","document","body","alpha","antialias","clearColor","sortObjects","fog","light","THREE","DirectionalLight","lightPosition","cameraType","cameraPosition","orthoZoom","controlSettings","minDistance","maxDistance","zoomSpeed","noZoom","util","merge","this","renderer","WebGLRenderer","setClearColor","width","window","innerWidth","height","innerHeight","container","add","AmbientLight","position","set","normalize","camera","OrthographicCamera","PerspectiveCamera","contolled","controls","OrbitControls","domElement","copy","addEventListener","type","left","right","top","bottom","aspect","updateProjectionMatrix","setSize","bind","attachTo","prototype","constructor","style","setPixelRatio","devicePixelRatio","appendChild","mesh","remove","render","update","updateOrthoZoom","focusOn","obj","lookAt","dispose","THREECube","entity","settings","Base","call","textureUrl","kai","view","size","color","emissive","overwrite","_display","cubeGeo","CubeGeometry","cubeMaterial","MeshPhongMaterial","shading","FlatShading","map","ImageUtils","loadTexture","Mesh","expect","Vector3","rotation","accessor","className","priority","activate","active","disable","setFromVector3"],"mappings":"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","file":"motorhaus-extras-three.min.js","sourcesContent":["/*\n\tSets up and manages a THREEjs container, camera, and light, making it easy to get going.\n\tAlso provides camera control.\n\tAssumes full screen.\n\t@author Corey Birnbaum http://coldconstructs.com/ @vonWolfehaus\n */\nmh.Scene = function(sceneConfig, controlConfig) {\n\tvar sceneSettings = {\n\t\telement: document.body,\n\t\talpha: true,\n\t\tantialias: true,\n\t\tclearColor: '#fff',\n\t\tsortObjects: false,\n\t\tfog: null,\n\t\tlight: new THREE.DirectionalLight(0xffffff),\n\t\tlightPosition: null,\n\t\tcameraType: 'PerspectiveCamera',\n\t\tcameraPosition: null, // {x, y, z}\n\t\torthoZoom: 4\n\t};\n\n\tvar controlSettings = {\n\t\tminDistance: 100,\n\t\tmaxDistance: 1000,\n\t\tzoomSpeed: 2,\n\t\tnoZoom: false\n\t};\n\n\tsceneSettings = mh.util.merge(sceneSettings, sceneConfig);\n\tif (typeof controlConfig !== 'boolean' && typeof controlConfig !== 'undefined') {\n\t\tcontrolSettings = mh.util.merge(controlSettings, controlConfig);\n\t}\n\n\tthis.renderer = new THREE.WebGLRenderer({\n\t\talpha: sceneSettings.alpha,\n\t\tantialias: sceneSettings.antialias\n\t});\n\tthis.renderer.setClearColor(sceneSettings.clearColor, 0);\n\tthis.renderer.sortObjects = sceneSettings.sortObjects;\n\n\tthis.width = window.innerWidth;\n\tthis.height = window.innerHeight;\n\n\tthis.orthoZoom = sceneSettings.orthoZoom;\n\n\tthis.container = new THREE.Scene();\n\tthis.container.fog = sceneSettings.fog;\n\n\tthis.container.add(new THREE.AmbientLight(0xdddddd));\n\n\tif (sceneSettings.light && !sceneSettings.lightPosition) {\n\t\tsceneSettings.light.position.set(-1, 1, -1).normalize();\n\t}\n\tif (sceneSettings.light) this.container.add(sceneSettings.light);\n\n\tif (sceneSettings.cameraType === 'OrthographicCamera') {\n\t\tvar width = window.innerWidth / this.orthoZoom;\n\t\tvar height = window.innerHeight / this.orthoZoom;\n\t\tthis.camera = new THREE.OrthographicCamera(width / -2, width / 2, height / 2, height / -2, 1, 5000);\n\t}\n\telse {\n\t\tthis.camera = new THREE.PerspectiveCamera(50, this.width / this.height, 1, 5000);\n\t}\n\n\tthis.contolled = !!controlConfig;\n\tif (this.contolled) {\n\t\tthis.controls = new THREE.OrbitControls(this.camera, this.renderer.domElement);\n\t\tthis.controls.minDistance = controlSettings.minDistance;\n\t\tthis.controls.maxDistance = controlSettings.maxDistance;\n\t\tthis.controls.zoomSpeed = controlSettings.zoomSpeed;\n\t\tthis.controls.noZoom = controlSettings.noZoom;\n\t}\n\n\tif (sceneSettings.cameraPosition) {\n\t\tthis.camera.position.copy(sceneSettings.cameraPosition);\n\t}\n\n\twindow.addEventListener('resize', function onWindowResize() {\n\t\tthis.width = window.innerWidth;\n\t\tthis.height = window.innerHeight;\n\t\tif (this.camera.type === 'OrthographicCamera') {\n\t\t\tvar width = this.width / this.orthoZoom;\n\t\t\tvar height = this.height / this.orthoZoom;\n\t\t\tthis.camera.left = width / -2;\n\t\t\tthis.camera.right = width / 2;\n\t\t\tthis.camera.top = height / 2;\n\t\t\tthis.camera.bottom = height / -2;\n\t\t}\n\t\telse {\n\t\t\tthis.camera.aspect = this.width / this.height;\n\t\t}\n\t\tthis.camera.updateProjectionMatrix();\n\t\tthis.renderer.setSize(this.width, this.height);\n\t}.bind(this), false);\n\n\tthis.attachTo(sceneSettings.element);\n};\n\nmh.Scene.prototype = {\n\tconstructor: mh.Scene,\n\n\tattachTo: function(element) {\n\t\telement.style.width = this.width + 'px';\n\t\telement.style.height = this.height + 'px';\n\t\tthis.renderer.setPixelRatio(window.devicePixelRatio);\n\t\tthis.renderer.setSize(this.width, this.height);\n\t\telement.appendChild(this.renderer.domElement);\n\t},\n\n\tadd: function(mesh) {\n\t\tthis.container.add(mesh);\n\t},\n\n\tremove: function(mesh) {\n\t\tthis.container.remove(mesh);\n\t},\n\n\trender: function() {\n\t\tif (this.contolled) this.controls.update();\n\t\tthis.renderer.render(this.container, this.camera);\n\t},\n\n\tupdateOrthoZoom: function() {\n\t\tif (this.orthoZoom <= 0) {\n\t\t\tthis.orthoZoom = 0;\n\t\t\treturn;\n\t\t}\n\t\tvar width = this.width / this.orthoZoom;\n\t\tvar height = this.height / this.orthoZoom;\n\t\tthis.camera.left = width / -2;\n\t\tthis.camera.right = width / 2;\n\t\tthis.camera.top = height / 2;\n\t\tthis.camera.bottom = height / -2;\n\t\tthis.camera.updateProjectionMatrix();\n\t},\n\n\tfocusOn: function(obj) {\n\t\tthis.camera.lookAt(obj.position);\n\t},\n\n\tdispose: function() {\n\n\t}\n};\n","/*\n\tAbstracts threejs cube creation so it integrates nicely into our entity-component system.\n\t@author Corey Birnbaum http://coldconstructs.com/ @vonWolfehaus\n*/\nmh.THREECube = function(entity, settings) {\n\tsettings = settings || {};\n\tmh.Base.call(this);\n\n\t// attributes\n\tthis.textureUrl = null;\n\tthis.container = mh.kai.view;\n\tthis.size = 50;\n\t// this.dynamic = false;\n\tthis.color = 0x156289;\n\tthis.emissive = 0x072534;\n\n\tmh.util.overwrite(this, settings);\n\n\t// private properties\n\tthis.entity = entity;\n\tthis._display = null;\n\n\t// NEVER do this in production! geo and materials should be cached!\n\t// But I'm on vacation and this is prototype code so, meh\n\tvar cubeGeo = new THREE.CubeGeometry(this.size, this.size, this.size);\n\tvar cubeMaterial = new THREE.MeshPhongMaterial({\n\t\tcolor: 0x156289,\n\t\temissive: 0x072534,\n\t\tshading: THREE.FlatShading,\n\t\tmap: this.textureUrl ? THREE.ImageUtils.loadTexture(this.textureUrl) : null\n\t});\n\n\tthis._display = new THREE.Mesh(cubeGeo, cubeMaterial);\n\n\t/*if (!this.dynamic) {\n\t\tthis._display.matrixAutoUpdate = false;\n\t\tthis._display.position.copy(entity.position);\n\t\tthis._display.updateMatrix();\n\t}*/\n\n\t// prerequisite components\n\tthis.position = mh.kai.expect(entity, 'position', THREE.Vector3);\n\tthis.rotation = mh.kai.expect(entity, 'rotation', THREE.Vector3);\n};\n\n// required statics for component system\nmh.THREECube.accessor = 'view'; // property name as it sits on an entity\nmh.THREECube.className = 'VIEW_CUBE'; // name of component on the mh.Component object\nmh.THREECube.priority = 10; // general position in the engine's component array; highest updated first\n\nmh.THREECube.prototype = {\n\tconstructor: mh.THREECube,\n\n\tactivate: function() {\n\t\tthis.active = true;\n\t\tthis.container.add(this._display);\n\t},\n\n\tdisable: function() {\n\t\tthis.active = false;\n\t\tthis.container.remove(this._display);\n\t},\n\n\tupdate: function() {\n\t\tthis._display.position.copy(this.position);\n\t\tthis._display.rotation.setFromVector3(this.rotation);\n\t},\n\n\tdispose: function() {\n\t\tthis.disable();\n\n\t\t// null references\n\t\tthis.entity = null;\n\t\tthis.position = null;\n\t\tthis._display = null; // if you don't dispose() THREE Geometry, you'll get memory leaks FYI\n\t}\n};\n"],"sourceRoot":"/source/"}